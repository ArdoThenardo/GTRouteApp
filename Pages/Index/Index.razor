@page "/"
@using GTRouteApp.Services
@using GTRouteApp.Models
@namespace GTRouteApp.HomeComponents
@inject FeaturedService FeaturedService
@inject NavigationManager NavigationManager

<PageTitle>Home | GTRoad</PageTitle>

<div class="home-container">
    @if (featuredTracks == null || featuredTracks.Count() == 0)
    {
        <NoDataView Message="@errorMessage" ShowError="@showError" OnTryAgainClicked="OnTryAgainHandler" />
    }
    else
    {
        <IndexSubheader Info="Welcome to GTRoad! Here you can look for information of race tracks that featured on Gran Turismo series." />

        <IndexFeaturedTrack Tracks="@featuredTracks" 
            FeaturedImages="@featuredMediaImage"
            FeaturedVideos="@featuredMediaVideo" />

        <div class="index-featured-media">
            <IndexFeaturedMediaHeader />
            @if (featuredMediaVideo.Count() > 0)
            {
                <IndexFeaturedMediaVideo Media="@featuredMediaVideo" />
            }
            @if (featuredMediaImage.Count() > 0)
            {
                <hr class="mx-5 my-2">
                <IndexFeaturedMediaImage Media="@featuredMediaImage" />
            }
        </div>

        <div class="index-callout-container">
            <div class="index-callout">
                <strong><span class="bi bi-info-circle-fill" /> You can try to browse and see more race tracks <a href="/browse">here</a>.</strong>
            </div>
        </div>

        <div class="index-banner" />
    }
</div>

@code {
    private List<FeaturedTrack> featuredTracks = new();
    private List<FeaturedVideo> featuredMediaVideo = new(); 
    private List<FeaturedImage> featuredMediaImage = new();

    private string errorMessage = "";
    private bool showError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await LoadFeatured();
        CheckError();
    }

    private async Task LoadFeatured()
    {
        var featuredTracksData = await FeaturedService.GetFeaturedTracks();
        featuredTracks.AddRange(featuredTracksData);

        var featuredMediaVideoData = await FeaturedService.GetFeaturedMediaVideo(2);
        featuredMediaVideo.AddRange(featuredMediaVideoData);

        var featuredMediaImageData = await FeaturedService.GetFeaturedMediaImage(4);
        featuredMediaImage.AddRange(featuredMediaImageData);
    }

    private void AccessTrackDetail(string slug)
    {
        NavigationManager.NavigateTo($"/browse/detail/{slug}?origin=home");
    }

    private void CheckError()
    {
        errorMessage = FeaturedService.GetRecentErrorMessage();
        showError = string.IsNullOrWhiteSpace(errorMessage) ? false : true;
    }

    private async Task OnTryAgainHandler()
    {
        showError = false;

        await LoadData();
    }
}