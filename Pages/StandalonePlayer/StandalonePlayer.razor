@page "/player/{VideoId}"
@using GTRouteApp.Services
@using GTRouteApp.Models
@using GTRouteApp.Helpers
@using GTRouteApp.DetailComponents
@inject VideoPlayerService VideoPlayerService
@inject TrackDetailService TrackDetailService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@if (string.IsNullOrWhiteSpace(videoData.Slug)) // assume no video data if slug is empty
{
    <PageTitle>Video Player | GTRoad</PageTitle>

    <div style="height: 88vh; background-color: #f4f4f2;">
        <NoDataView Message="@errorMessageForVideoData" 
            ShowError="@showErrorForVideoData" 
            OnTryAgainClicked="OnTryAgainGetVideoHandler" />
    </div>
}
else
{
    <div class="player-container" @ref="playerRef">
        <PageTitle>@videoData.VideoName | GTRoad</PageTitle>

        <div class="player-side-sub-container">
            <div class="player-row-1">
                <button type="button" 
                    class="btn btn-secondary"
                    @onclick="() => BackToHome()">
                    <span class="bi bi-arrow-left-square"></span> Back to Home
                </button>
            </div>

            <div class="player-row-2">
                @if (!string.IsNullOrWhiteSpace(videoData.VideoUrl))
                {
                    <div class="player-column">
                        <div class="standalone-player">
                            @if (!showPlayer)
                            {
                                <div class="play-confirmation" 
                                    style="--bg-thumbnail: url(@videoData.ThumbnailUrl);">
                                    <button type="button" 
                                        class="btn btn-success"
                                        @onclick="() => ShowVideo()">
                                        <span><i class="bi bi-play-fill"></i>Play Video</span>
                                    </button>
                                </div>
                            }
                            else
                            {
                                <BlazoredVideo @ref="videoRef"
                                    style="width: inherit;
                                        box-shadow: 1px 1px 16px rgba(30, 32, 34, 0.6);" 
                                    controls="controls">
                                    <source src="@videoData.VideoUrl" />
                                </BlazoredVideo>
                            }
                        </div>
                    </div>
                }

                <div class="information-column">
                    <span>@videoData.VideoType</span>
                    <p>@videoData.VideoName</p>
                    <p>
                        <span class="bi bi-person-fill"></span> @videoData.Author
                    </p>
                    <p>
                        <span class="bi bi-card-text"></span> @videoData.Description
                    </p>
                </div>
            </div>
        </div>

        <div class="related-side-sub-container">
            <div class="track-info-box">
                @if (!string.IsNullOrWhiteSpace(trackData.Name)) // assume no track data if name is empty
                {
                    <div class="track-info-row">
                        <img src="@trackData.LogoUrl" alt="@trackData.Name" />
                        <div class="track-info-property">
                            <p>@trackData.Name</p>
                            <p>@trackData.Category</p>
                            <p><span class="fi fi-@trackData.Country?.code"></span> @trackData.Country?.name</p>
                        </div>
                    </div>
                    <button type="button" 
                        class="btn btn-success"
                        @onclick="() => AccessTrackDetail(videoData.Slug)">
                        View Track
                    </button>
                }
                else
                {
                    <div class="track-info-placeholder">
                        <NoDataView Message="@errorMessageForTrackInfo" 
                            ShowError="@showErrorForTrackInfo"
                            OnTryAgainClicked="OnTryAgainGetTrackInfo" />
                    </div>
                }
            </div>

            <div class="related-header">
                <span><i class="bi bi-film"></i> Suggested Video&#40;s&#41;</span>
            </div>

            <div class="related-videos">
                @if (otherVideos.Count() < 1)
                {
                    @if (showErrorForOtherVideos)
                    {
                        <NoDataView Message="@errorMessageForOtherVideos"
                            ShowError="@showErrorForOtherVideos"
                            OnTryAgainClicked="OnTryAgainGetOtherVideos" />
                    }
                    else
                    {
                        <DetailNoData OverrideText="@noOtherVideosMessage"
                            IconDisplayCssValue="none" />
                    }
                }
                else
                {
                    @foreach (var video in otherVideos)
                    {
                        <article class="related-video-item" 
                            @onclick="() => AccessOtherVideo(video.Id)">
                            <div class="related-thumbnail-area">
                                <img alt="@video.VideoName" 
                                    src="@video.ThumbnailUrl" />
                                <span class="bi bi-play-circle"></span>
                                <span><i class="bi bi-stopwatch"></i> @TimeConverters.ConvertSecondsToMinutes(video.DurationInSeconds ?? 0)</span>
                            </div>

                            <div class="related-info-area">
                                <span>@video.VideoType</span>
                                <p>@video.VideoName</p>
                                <p>
                                    <span class="bi bi-person-fill"></span>
                                    @video.Author
                                </p>
                            </div>
                        </article>
                    }
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string VideoId { get; set; } = "";
    private TrackVideo videoData = new();
    private BasicTrackDetail trackData = new();
    private List<TrackVideo> otherVideos = new();

    BlazoredVideo? videoRef;
    ElementReference playerRef;
    private string errorMessageForVideoData = "";
    private string errorMessageForTrackInfo = "";
    private string errorMessageForOtherVideos = "";
    private bool showErrorForVideoData = false;
    private bool showErrorForTrackInfo = false;
    private bool showErrorForOtherVideos = false;
    private string noOtherVideosMessage = ErrorMessage.NoRelatedVideos;
    private bool showPlayer = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await LoadVideoData();
        await LoadTrackData();
        await LoadListOfOtherVideos();

        CheckError();
    }

    private async Task LoadVideoData()
    {
        var data = await VideoPlayerService.GetVideoDataById(VideoId);
        videoData = data;

        // reload player to make sure player play right video after data is assigned
        if (videoRef != null)
            await videoRef.ReloadControl();
    }

    private async Task LoadTrackData()
    {
        if (!string.IsNullOrWhiteSpace(videoData.Slug))
        {
            var data = await TrackDetailService.GetBasicTrackDetail(videoData.Slug);
            trackData = data;
        }
    }

    private async Task LoadListOfOtherVideos()
    {
        var data = await VideoPlayerService.GetOtherVideosById(this.VideoId);
        otherVideos = data;
    }

    private void CheckError()
    {
        errorMessageForVideoData = VideoPlayerService.GetRecentErrorMessage();
        showErrorForVideoData = string.IsNullOrWhiteSpace(errorMessageForVideoData) ? false : true;

        errorMessageForTrackInfo = TrackDetailService.GetRecentErrorMessage();
        showErrorForTrackInfo = string.IsNullOrWhiteSpace(errorMessageForTrackInfo) ? false : true;

        errorMessageForOtherVideos = VideoPlayerService.GetRecentErrorForOtherVideos();
        showErrorForOtherVideos = string.IsNullOrWhiteSpace(errorMessageForOtherVideos) ? false : true;
    }

    private async Task OnTryAgainGetVideoHandler()
    {
        showErrorForVideoData = false;

        await LoadData();
    }

    private async Task OnTryAgainGetTrackInfo()
    {
        showErrorForTrackInfo = false;

        await LoadVideoData();
        CheckError();
    }

    private async Task OnTryAgainGetOtherVideos()
    {
        showErrorForOtherVideos = false;

        await LoadListOfOtherVideos();
        CheckError();
    }

    private void BackToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void ShowVideo()
    {
        showPlayer = true;
    }

    private void AccessTrackDetail(string slug)
    {
        NavigationManager.NavigateTo($"/browse/detail/{slug}");
    }

    private void AccessOtherVideo(string? videoId)
    {
        if (!string.IsNullOrWhiteSpace(videoId))
            NavigationManager.NavigateTo($"/player/{videoId}", true);
    }

    public async ValueTask DisposeAsync()
    {
        if (videoRef != null)
            await videoRef.SetSrcAsync("");
    }
}