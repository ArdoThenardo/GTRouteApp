@using GTRouteApp.Models
@using GTRouteApp.Helpers
@namespace GTRouteApp.Components.Detail

<div class="gallery-container">
    @if (Images.Count() < 1)
    {
        <DetailNoData Text="image" />
    }
    else
    {
        <DetailGalleryInnerHeader Info="@_innerHeaderInfo" 
            SelectedMode="@_selectedMode"
            OnGalleryModeChanged="ChangeGalleryMode" />

        @if (_selectedMode == DetailGalleryMode.Slideshow)
        {
            <DetailGallerySlideshow LoadedImages="@loadedImages" 
                TotalNumberOfImages="@Images.Count()"
                OnLoadMoreClicked="() => LoadImages(nextPage)" />
        } 
        else if (_selectedMode == DetailGalleryMode.Grid)
        {
            <DetailGalleryGrid LoadedImages="@loadedImages"
                TotalNumberOfImages="@Images.Count()"
                OnLoadMoreClicked="() => LoadImages(nextPage)" />
        }
    }
</div>

@code {
    [Parameter]
    public List<TrackImage> Images { get; set; } = new();

    private List<TrackImage> loadedImages = new();
    private int nextPage = 1;
    private const int itemLimit = 6;
    private DetailGalleryMode _selectedMode = DetailGalleryMode.Slideshow;
    private string _innerHeaderInfo = "";

    private const string SlideshowInfo = "Click or tap image at the bottom to higlight.";
    private const string GridInfo = "Click or tap image to view.";
    
    protected override void OnInitialized()
    {
        _innerHeaderInfo = SlideshowInfo; // pre-set to slideshow mode info
        LoadImages(nextPage);
    }

    private void LoadImages(int page)
    {
        var images = Images.Skip(itemLimit * (page - 1)).Take(itemLimit).ToList();
        loadedImages.AddRange(images);

        nextPage += 1;
    }

    private void ChangeGalleryMode(DetailGalleryMode mode)
    {
        _selectedMode = mode;

        switch (_selectedMode)
        {
            case DetailGalleryMode.Slideshow:
                _innerHeaderInfo = SlideshowInfo;
                break;
            case DetailGalleryMode.Grid:
                _innerHeaderInfo = GridInfo;
                break;
        }
    }
}