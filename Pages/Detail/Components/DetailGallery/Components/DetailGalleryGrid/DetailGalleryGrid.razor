@using GTRouteApp.Models
@namespace GTRouteApp.Components.Detail
@inject IJSRuntime JS

<div class="grid-container">
    @foreach (var image in LoadedImages
                                .Select((imageData, index) => (imageData, index)))
    {
        <article class="grid-item item-revelation" 
            @onclick="() => ViewImageDetail(image.imageData)">
            <div class="item-placeholder">
                <span class="bi bi-image-fill"></span>
            </div>
            <img src="@image.imageData.ImageUrl" 
                alt="@image.imageData.ImageName" />
        </article>
    }
    @if (LoadedImages.Count() < TotalNumberOfImages)
    {
        <div class="button-item item-revelation">
            <button type="button" 
                class="btn btn-primary load-more-btn" 
                @onclick="LoadMoreImages">
                Load More
            </button>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<TrackImage> LoadedImages { get; set; } = new();
    [Parameter]
    public int TotalNumberOfImages { get; set; } = 0;
    [Parameter]
    public EventCallback OnLoadMoreClicked { get; set; }

    [CascadingParameter] 
    public IModalService DetailModal { get; set; } = default!;

    private ModalOptions _modalOptions = new ModalOptions()
    {
        Class = "custom-blazored-modal",
        Size = ModalSize.Automatic,
        Position = ModalPosition.Middle,
        HideHeader = true
    };

    private async Task LoadMoreImages()
    {
        await OnLoadMoreClicked.InvokeAsync();
    }

    private void ViewImageDetail(TrackImage image)
    {
        var modal = DetailModal.Show<DetailGalleryModal>(
            "Image Detail", 
            new ModalParameters().Add(nameof(DetailGalleryModal.Image), image),
            _modalOptions);
    }
}