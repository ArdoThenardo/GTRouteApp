@using GTRouteApp.Models
@using GTRouteApp.Helpers
@namespace GTRouteApp.Components.Detail
@inject IJSRuntime JS

<div class="slideshow-container">
    <div class="slideshow-highlight">
        <div class="highlight-image-section">
            <div class="highlight-placeholder">
                <div class="highlight-shimmer"></div>
                <span class="bi bi-image"></span>
            </div>
            <img src="@_selectedImageUrl" 
                alt="@LoadedImages.ElementAt(_selectedImageIndex).ImageName"
                style="display: @(_isChanging ? "none" : "block");"
                @ref="@highlightImageRef">
            <button type="button" 
                title="See Image in Full Screen"
                class="btn btn-secondary full-btn" 
                @onclick="() => OpenImageInFullScreen(_selectedImageUrl)">
                <span class="bi bi-arrows-fullscreen"></span> 
                <span class="full-btn-text" style="margin-left: 6px">See Image in Full Screen</span>
            </button>
            <button type="button" 
                title="See next image"
                class="btn next-btn" 
                disabled="@_isNextDisabled"
                @onclick="() => InitiateSelection(_selectedImageIndex + 1)">
                <span class="bi bi-chevron-right"></span>
            </button>
            <button type="button" 
                title="See previous image"
                class="btn prev-btn" 
                disabled="@_isPrevDisabled"
                @onclick="() => InitiateSelection(_selectedImageIndex - 1)">
                <span class="bi bi-chevron-left"></span>
            </button>
            <button type="button" 
                class="btn btn-secondary info-visibility-btn" 
                style="bottom: @infoVisibilityButtonBottomPosition;"
                @onclick="() => ToggleInfoVisibility()">
                @if (_isInfoHidden)
                {
                    <p>
                        <span class="bi bi-info-circle"></span>
                        Show Info<span class="bi bi-chevron-up" style="margin-left: 6px;"></span>
                    </p>
                }
                else
                {
                    <p>
                        <span class="bi bi-info-circle"></span>
                        Hide Info<span class="bi bi-chevron-down" style="margin-left: 6px;"></span>
                    </p>
                }
            </button>
            <div class="highlight-info-section" style="visibility: @infoVisibilityStyle;">
                <div class="info-part-1">
                    <p>@LoadedImages.ElementAt(_selectedImageIndex).Description</p>
                </div>
                <div class="info-part-2">
                    <p>
                        <span class="bi bi-camera-fill"></span> by @LoadedImages.ElementAt(_selectedImageIndex).Author
                    </p>
                </div>
            </div>
        </div>
    </div>

    <div class="slideshow-selection">
        @foreach (var image in LoadedImages
                                .Select((imageData, index) => (imageData, index)))
        {
            <div class="@((_selectedImageIndex == image.index) ? "gallery-item-selected" : "gallery-item")" 
                @onclick="() => InitiateSelection(image.index)">
                <div class="item-shimmer"></div>
                <div class="item-placeholder">
                    <span class="bi bi-image-fill"></span>
                </div>
                <img src="@image.imageData.ThumbnailUrl" 
                    alt="@image.imageData.ImageName" />
            </div>
        }
        @if (LoadedImages.Count() < TotalNumberOfImages)
        {
            <div class="button-item">
                <button type="button" 
                    class="btn btn-primary load-more-btn" 
                    @onclick="LoadMoreImages">
                    Load More
                </button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public List<TrackImage> LoadedImages { get; set; } = new();
    [Parameter]
    public int TotalNumberOfImages { get; set; } = 0;
    [Parameter]
    public EventCallback OnLoadMoreClicked { get; set; }

    private int _selectedImageIndex = 0;
    private string _selectedImageUrl = "";
    private bool _isNextDisabled = false;
    private bool _isPrevDisabled = false;
    private bool _isInfoHidden = false;
    private string infoVisibilityStyle = "visible"; // "hidden" and "visible"
    private string infoVisibilityButtonBottomPosition = "74px"; // "12px" and "74px"
    private bool _isChanging = false;

    ElementReference highlightImageRef;

    protected override void OnInitialized()
    {
        if (TotalNumberOfImages > 0)
            SetSelection(_selectedImageIndex);
    }

    private async Task InitiateSelection(int selectedIndex)
    {
        if (_selectedImageIndex != selectedIndex)
        {
            _isChanging = true;
            await Task.Delay(10); // necessary to delay so previously loaded image won't show on next selected item

            SetSelection(selectedIndex);

            ToggleArrowButton();
            SetDefaultInfoVisibility();

            await ResetHighlightAnimationWithJS();
        }
    }

    private void SetSelection(int index)
    {
        _selectedImageIndex = index;
        _selectedImageUrl = LoadedImages.ElementAt(_selectedImageIndex).ImageUrl ?? "";
        
        _isChanging = false;
    }

    private async Task LoadMoreImages()
    {
        await OnLoadMoreClicked.InvokeAsync();
        ToggleArrowButton();
    }

    private async Task OpenImageInFullScreen(string? url)
    {
        if (url is not null)
            await JS.InvokeVoidAsync("open", url, "_blank");
    }

    private void ToggleArrowButton()
    {
        _isNextDisabled = _selectedImageIndex == (LoadedImages.Count() - 1) ? true : false;
        _isPrevDisabled = _selectedImageIndex == 0 ? true : false;
    }

    private void ToggleInfoVisibility()
    {
        _isInfoHidden = _isInfoHidden ? false : true;
        infoVisibilityStyle = _isInfoHidden ? "hidden" : "visible";
        infoVisibilityButtonBottomPosition = _isInfoHidden ? "12px" : "74px";
    }

    private void SetDefaultInfoVisibility()
    {
        _isInfoHidden = false;
        infoVisibilityStyle = "visible";
        infoVisibilityButtonBottomPosition = "74px";
    }

    private async Task ResetHighlightAnimationWithJS()
    {
        await JS.InvokeVoidAsync("resetAnimationByStyle", highlightImageRef);
    }
}