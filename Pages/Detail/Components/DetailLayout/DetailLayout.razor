@using GTRouteApp.Models
@using GTRouteApp.Helpers
@namespace GTRouteApp.Components.Detail
@inject IJSRuntime JS

<div class="detail-layout-container">
    <div class="layout-header">
        <p class="detail-track-name">
            <span class="bi bi-geo-alt-fill" style="margin-right: 6px"></span>@Name
        </p>
    </div>

    <div class="layout-cover">
        <img src="@CoverImageUrl" alt="@Name" />
    </div>

    @if (Layouts.Count() < 1)
    {
        <DetailNoData Text="layout" />
    }
    else
    {
        <div class="layout-selection-area">
            <div class="layout-selection-label-1">
                <span class="bi bi-stack"></span> Layout List
            </div>
            <div class="layout-selection">
                @foreach (var layoutItem in Layouts.Select((data, index) => (data, index)))
                {
                    <div class="@((selectedIndex == layoutItem.index) ? "layout-item-selected" : "layout-item")" 
                        @onclick="() => InitiateSelection(layoutItem.index)">
                        <div class="layout-item-thumbnail">
                            <div class="layout-item-shimmer"></div>
                            <img src="@layoutItem.data.ThumbnailUrl" alt="@layoutItem.data.LayoutName" />
                        </div>
                        <p>@layoutItem.data.LayoutName</p>
                    </div>
                }
            </div>

            <div class="layout-selection-label-2">
                <span class="bi bi-info-circle-fill"></span> Layout Information
            </div>
            <div class="layout-highlight">
                <div class="layout-map">
                    <div class="layout-item-shimmer"></div>
                    <div class="map-placeholder">
                        <span class="bi bi-card-image"></span>
                    </div>
                    <img src="@selectedMapLayoutUrl" 
                        alt="@Layouts.ElementAt(selectedIndex).LayoutName"
                        style="display: @(isChanging ? "none" : "block");"
                        @ref="@highlightMapRef" />
                </div>
                <div class="layout-info">
                    <div class="info-group">
                        <p class="info-label">Name</p>
                        <p class="info-value">@Layouts.ElementAt(selectedIndex).LayoutName</p>
                    </div>
                    <div class="info-group">
                        <p class="info-label">Length</p>
                        <p class="info-value">@Layouts.ElementAt(selectedIndex).Length m</p>
                    </div>
                    <div class="info-group">
                        <p class="info-label">Corners</p>
                        <p class="info-value">@Layouts.ElementAt(selectedIndex).Corners</p>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<TrackLayout> Layouts { get; set; } = new();
    [Parameter]
    public string Name { get; set; } = "";
    [Parameter]
    public string CoverImageUrl { get; set; } = "";
    private int selectedIndex = 0;
    private string selectedMapLayoutUrl = "";
    private bool isChanging = false;

    ElementReference highlightMapRef;

    protected override void OnParametersSet()
    {
        if (Layouts.Count() > 0)
            SetSelection(selectedIndex);
    }

    private async Task InitiateSelection(int index)
    {
        if (selectedIndex != index)
        {
            isChanging = true;
            await Task.Delay(10); // necessary to delay so previously loaded image won't show on next selected item

            SetSelection(index);
            await ResetHighlightAnimationWithJS();
        }
    }

    private void SetSelection(int index)
    {
        selectedIndex = index;
        selectedMapLayoutUrl = Layouts.ElementAt(selectedIndex).MapUrl ?? "";

        isChanging = false;
    }

    private async Task ResetHighlightAnimationWithJS()
    {
        await JS.InvokeVoidAsync("resetAnimationByStyle", highlightMapRef);
    }
}