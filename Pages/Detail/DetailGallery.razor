@using GTRouteApp.Models
@using GTRouteApp.Helpers
@inject IJSRuntime JS

<div class="gallery-container">
    @if (Images.Count() < 1)
    {
        <DetailNoData Text="image" />
    }
    else
    {
        <div class="detail-gallery-highlight">
            <div class="highlight-image-section">
                <div class="highlight-placeholder">
                    <span class="bi bi-image"></span>
                </div>
                <img src="@selectedImageUrl" 
                    alt="@loadedImages.ElementAt(selectedImageIndex).ImageName"
                    @ref="@highlightImageRef">
                <button type="button" 
                    title="See Image in Full Screen"
                    class="btn btn-secondary full-btn" 
                    @onclick="() => OpenImageInFullScreen(selectedImageUrl)">
                    <span class="bi bi-arrows-fullscreen"></span> 
                    <span class="full-btn-text" style="margin-left: 6px">See Image in Full Screen</span>
                </button>
                <button type="button" 
                    title="See next image"
                    class="btn btn-secondary next-btn" 
                    disabled="@isNextDisabled"
                    @onclick="() => SetSelection(selectedImageIndex + 1)">
                    <span class="bi bi-chevron-right"></span>
                </button>
                <button type="button" 
                    title="See previous image"
                    class="btn btn-secondary prev-btn" 
                    disabled="@isPrevDisabled"
                    @onclick="() => SetSelection(selectedImageIndex - 1)">
                    <span class="bi bi-chevron-left"></span>
                </button>
                <button type="button" 
                    class="btn btn-secondary info-visibility-btn" 
                    style="bottom: @infoVisibilityButtonBottomPosition;"
                    @onclick="() => ToggleInfoVisibility()">
                    @if (isInfoHidden)
                    {
                        <p>
                            <span class="bi bi-info-circle"></span>
                            Show Info<span class="bi bi-chevron-up" style="margin-left: 6px;"></span>
                        </p>
                    }
                    else
                    {
                        <p>
                            <span class="bi bi-info-circle"></span>
                            Hide Info<span class="bi bi-chevron-down" style="margin-left: 6px;"></span>
                        </p>
                    }
                </button>
                <div class="highlight-info-section" style="visibility: @infoVisibilityStyle;">
                    <div class="info-part-1">
                        <p>@loadedImages.ElementAt(selectedImageIndex).Description</p>
                    </div>
                    <div class="info-part-2">
                        <p>
                            <span class="bi bi-camera-fill"></span> by @loadedImages.ElementAt(selectedImageIndex).Author
                        </p>
                    </div>
                </div>
            </div>
            
        </div>
        <div class="detail-gallery-selection">
            @foreach (var image in loadedImages
                                    .Select((imageData, index) => (imageData, index)))
            {
                @if (selectedImageIndex == image.index)
                {
                    <div class="gallery-item-selected">
                        <div class="item-shimmer"></div>
                        <div class="item-placeholder">
                            <span class="bi bi-image-fill"></span>
                        </div>
                        <img src="@image.imageData.ThumbnailUrl" 
                            alt="@image.imageData.ImageName" />
                    </div>
                }
                else
                {
                    <div class="gallery-item" @onclick="() => SetSelection(image.index)">
                        <div class="item-shimmer"></div>
                        <div class="item-placeholder">
                            <span class="bi bi-image-fill"></span>
                        </div>
                        <img src="@image.imageData.ThumbnailUrl" 
                            alt="@image.imageData.ImageName" />
                    </div>
                }
            }
            @if (loadedImages.Count() < Images.Count())
            {
                <div class="button-item">
                    <button type="button" 
                        class="btn btn-primary load-more-btn" 
                        @onclick="() => LoadImages(nextPage)">
                        Load More
                    </button>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public List<TrackImage> Images { get; set; } = new();
    private List<TrackImage> loadedImages = new();
    private int selectedImageIndex = 0;
    private string selectedImageUrl = "";
    private bool isNextDisabled = false;
    private bool isPrevDisabled = false;
    private bool isInfoHidden = false;
    private string infoVisibilityStyle = "visible"; // "hidden" and "visible"
    private string infoVisibilityButtonBottomPosition = "74px"; // "12px" and "74px"
    private int nextPage = 1;
    private const int itemLimit = 6;
    
    ElementReference highlightImageRef;

    protected override async Task OnInitializedAsync()
    {
        LoadImages(nextPage);
        if (Images.Count() > 0)
            await SetSelection(selectedImageIndex);
    }

    private async Task SetSelection(int selectedIndex)
    {
        selectedImageUrl = GeneralConstants.PlaceholderImageUrl; // switch to placeholder image temporarily
        await Task.Delay(10);

        selectedImageIndex = selectedIndex;
        selectedImageUrl = loadedImages.ElementAt(selectedImageIndex).ImageUrl ?? "";

        ToggleArrowButton();
        SetDefaultInfoVisibility();

        await ResetHighlightAnimationWithJS();
    }

    private void LoadImages(int page)
    {
        var images = Images.Skip(itemLimit * (page - 1)).Take(itemLimit).ToList();
        loadedImages.AddRange(images);

        nextPage += 1;
        ToggleArrowButton();
    }

    private async Task OpenImageInFullScreen(string? url)
    {
        if (url is not null)
            await JS.InvokeVoidAsync("open", url, "_blank");
    }

    private void ToggleArrowButton()
    {
        isNextDisabled = selectedImageIndex == (loadedImages.Count() - 1) ? true : false;
        isPrevDisabled = selectedImageIndex == 0 ? true : false;
    }

    private void ToggleInfoVisibility()
    {
        isInfoHidden = isInfoHidden ? false : true;
        infoVisibilityStyle = isInfoHidden ? "hidden" : "visible";
        infoVisibilityButtonBottomPosition = isInfoHidden ? "12px" : "74px";
    }

    private void SetDefaultInfoVisibility()
    {
        isInfoHidden = false;
        infoVisibilityStyle = "visible";
        infoVisibilityButtonBottomPosition = "74px";
    }

    private async Task ResetHighlightAnimationWithJS()
    {
        await JS.InvokeVoidAsync("resetAnimationByStyle", highlightImageRef);
    }
}