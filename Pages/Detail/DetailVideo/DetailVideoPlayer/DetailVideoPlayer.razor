@using GTRouteApp.Models
@using GTRouteApp.Helpers
@namespace GTRouteApp.DetailComponents
@inject IJSRuntime JS

<div class="detail-player-container" @ref="detailPlayerRef">
    <div class="player-side-sub-container">
        <div class="detail-player-row-1">
            <button type="button" 
                class="btn btn-secondary" 
                @onclick="() => BackToVideoSelection()">
                <span class="bi bi-arrow-left-square"></span> Back to Selection
            </button>
        </div>

        <div class="detail-player-row-2">
            <div class="player-column">
                <div class="detail-player">
                    <BlazoredVideo @ref="videoRef"
                        style="width: inherit;
                            box-shadow: 1px 1px 16px rgba(30, 32, 34, 0.6);" 
                        controls="controls">
                        <source src="@Video.VideoUrl" />
                    </BlazoredVideo>
                </div>
            </div>

            <div class="information-column">
                <span>@Video.VideoType</span>
                <p>@Video.VideoName</p>
                <p>
                    <span class="bi bi-person-fill"></span> @Video.Author
                </p>
                <p>
                    <span class="bi bi-card-text"></span> @Video.Description
                </p>
            </div>
        </div>
    </div>

    <div class="related-side-sub-container">
        <div class="related-header">
            <span><i class="bi bi-film"></i> Related Video&#40;s&#41;</span>
        </div>

        <div class="related-videos">
            @if (RelatedVideos.Count() < 1)
            {
                <DetailNoData OverrideText="@noRelatedVideosMessage" 
                    IconDisplayCssValue="none" />
            }
            else
            {
                foreach (var relatedVideo in RelatedVideos)
                {
                    @if (!string.IsNullOrWhiteSpace(relatedVideo.Id) 
                        && !relatedVideo.Id.Equals(Video.Id))
                    {
                        <article class="related-video-item" 
                            @onclick="() => ChangeVideo(relatedVideo)">
                            <div class="related-thumbnail-area">
                                <img alt="@relatedVideo.VideoName" 
                                    src="@relatedVideo.ThumbnailUrl" />
                                <span class="bi bi-play-circle"></span>
                                <span><i class="bi bi-stopwatch"></i> @TimeConverters.ConvertSecondsToMinutes(relatedVideo.DurationInSeconds ?? 0)</span>
                            </div>

                            <div class="related-info-area">
                                <span>@relatedVideo.VideoType</span>
                                <p>@relatedVideo.VideoName</p>
                                <p>
                                    <span class="bi bi-person-fill"></span>
                                    @relatedVideo.Author
                                </p>
                            </div>
                        </article>
                    }
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public TrackVideo Video { get; set; } = new();

    [Parameter]
    public List<TrackVideo> RelatedVideos { get; set; } = new();

    [Parameter]
    public EventCallback OnBackClicked { get; set; }

    BlazoredVideo? videoRef;
    private string noRelatedVideosMessage = ErrorMessage.NoRelatedVideos;
    ElementReference detailPlayerRef;

    private async Task ChangeVideo(TrackVideo video)
    {
        Video = video;
        if (videoRef != null)
            await videoRef.ReloadControl();

        await JS.InvokeVoidAsync("scrollToTop");
        await JS.InvokeVoidAsync("scrollElementToTop", detailPlayerRef);
    }

    private async Task BackToVideoSelection()
    {
        Video = new();
        if (videoRef != null)
            await videoRef.ReloadControl();

        await OnBackClicked.InvokeAsync();
    }
}