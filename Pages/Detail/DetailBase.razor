@page "/browse/detail/{slug}"

@using GTRouteApp.Services
@using GTRouteApp.Models
@using GTRouteApp.Helpers
@inject TrackDetailService TrackDetailService
@inject NavigationManager NavigationManager

<div class="detail-container">
    @if (detail == null || string.IsNullOrWhiteSpace(detail.Name)) // assume no detail if there is no name 
    {
        <PageTitle>Track Detail | GTRoad</PageTitle>
        <NoDataView Message="@errorMessage" ShowError="@showError" OnTryAgainClicked="OnTryAgainHandler" />
    }
    else
    {
        <PageTitle>@detail.Name | GTRoad</PageTitle>

        <DetailSubheader Info="@subheaderInfoText" />

        <div class="detail-row-2">
            <DetailSidebar 
                OnSubDetailChanged="OnSubDetailChangedHandler" 
                OnBackClicked="OnBackSidebarClickedHandler"
                SelectedSubDetail="@chosenSubDetail"
                CoverUrl="@detail.CoverUrl"
                LogoUrl="@detail.LogoUrl"    
            />
            @if (chosenSubDetail == SubDetail.General)
            {
                <DetailGeneral Detail="@detail" />
            }
            else if (chosenSubDetail == SubDetail.Layout)
            {
                <DetailLayout Layouts="@layouts" 
                    Name="@detail.Name" 
                    CoverImageUrl="@detail.CoverUrl" />
            }
            else
            {
                <DetailGallery Images=@images />
            }
        </div>

        <div class="back-button">
            @if (!string.IsNullOrWhiteSpace(origin))
            {
                <button type="button" class="btn btn-secondary" @onclick="() => GoBack(origin)">
                    <span class="bi bi-arrow-left-square"></span> Back
                </button>
            }
            else
            {
                <button type="button" class="btn btn-secondary" @onclick="() => GoBack()">
                    <span class="bi bi-arrow-left-square"></span> Browse Race Tracks
                </button>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public string slug { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "origin")]
    public string origin { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "selected_subdetail")]
    public string selected_subdetail { get; set; } = "";

    private TrackDetail detail = new();
    private List<TrackLayout> layouts = new();
    private List<TrackImage> images = new();

    private string subheaderInfoText = "View general information of --this race track--";
    private SubDetail chosenSubDetail = SubDetail.General;
    
    private string errorMessage = "";
    private bool showError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        PreselectSubdetail(selected_subdetail);
    }

    private async Task LoadData()
    {
        await LoadDetail(slug);
        CheckError();
    }

    private async Task LoadDetail(string slug)
    {
        var data = await TrackDetailService.GetTrackDetail(slug);
        detail = data;
        layouts.AddRange(detail.Layouts);
        images.AddRange(detail.Images);

        ChangeSubheaderInfoText(detail.Name ?? "");
    }

    private void OnBackSidebarClickedHandler()
    {
        if (!string.IsNullOrWhiteSpace(origin))
        {
            GoBack(origin);
        }
        else
        {
            GoBack();
        }
    }

    private void OnSubDetailChangedHandler(SubDetail subDetail)
    {
        chosenSubDetail = subDetail;

        ChangeSubheaderInfoText(detail.Name ?? "");
        ChangeSelectedSubdetailLink();
    }

    private void ChangeSubheaderInfoText(string trackName)
    {
        switch (chosenSubDetail)
        {
            case SubDetail.General:
                subheaderInfoText = $"View general information of {trackName}";
                break;
            case SubDetail.Layout:
                subheaderInfoText = $"View available layout configurations on {trackName}";
                break;
            default:
                subheaderInfoText = $"View gallery of {trackName}";
                break;
        }
    }

    private void ChangeSelectedSubdetailLink()
    {
        var defaultNavigation = $"/browse/detail/{slug}?origin={origin}";

        switch (chosenSubDetail)
        {
            case SubDetail.General:
                NavigationManager
                    .NavigateTo($"{defaultNavigation}&selected_subdetail={SelectedSubdetail.General}");
                break;
            case SubDetail.Layout:
                NavigationManager
                    .NavigateTo($"{defaultNavigation}&selected_subdetail={SelectedSubdetail.Layout}");
                break;
            case SubDetail.Image:
                NavigationManager
                    .NavigateTo($"{defaultNavigation}&selected_subdetail={SelectedSubdetail.Gallery}");
                break;
            default:
                NavigationManager.NavigateTo(defaultNavigation);
                break;
        }
    }

    private void PreselectSubdetail(string subdetail)
    {
        switch (selected_subdetail)
        {
            case SelectedSubdetail.General:
                chosenSubDetail = SubDetail.General;
                break;
            case SelectedSubdetail.Layout:
                chosenSubDetail = SubDetail.Layout;
                break;
            case SelectedSubdetail.Gallery:
                chosenSubDetail = SubDetail.Image;
                break;
        }
    }

    private void GoBack(string originPage = "browse")
    {
        if (originPage.Equals("home"))
        {
            NavigationManager.NavigateTo("/");
        }
        else if (originPage.Equals("browseGallery"))
        {
            NavigationManager.NavigateTo("/browse?preselect_mode=gallery");
        }
        else if (originPage.Equals("browseGrid"))
        {
            NavigationManager.NavigateTo("/browse?preselect_mode=grid");
        }
        else
        {
            NavigationManager.NavigateTo("/browse");
        }
    }

    private void CheckError()
    {
        errorMessage = TrackDetailService.GetRecentErrorMessage();
        showError = string.IsNullOrWhiteSpace(errorMessage) ? false : true;
    }

    private async Task OnTryAgainHandler()
    {
        showError = false;

        await LoadData();
    }
}