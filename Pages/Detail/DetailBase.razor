@page "/browse/detail/{slug}"

@using GTRouteApp.Services
@using GTRouteApp.Models
@using GTRouteApp.Helpers
@namespace GTRouteApp.DetailComponents
@inject TrackDetailService TrackDetailService
@inject NavigationManager NavigationManager

<div class="detail-container">
    @if (detail == null || string.IsNullOrWhiteSpace(detail.Name)) // assume no detail if there is no name 
    {
        <PageTitle>Track Detail | GTRoad</PageTitle>
        <NoDataView Message="@errorMessage" ShowError="@showError" OnTryAgainClicked="OnTryAgainHandler" />
    }
    else
    {
        <PageTitle>@detail.Name | GTRoad</PageTitle>

        <DetailSubheader Info="@subheaderInfoText" />

        <div class="detail-row-2">
            <DetailSidebar 
                OnSubDetailChanged="OnSubDetailChangedHandler" 
                OnBackClicked="OnBackSidebarClickedHandler"
                SelectedSubDetail="@chosenSubDetail"
                ShowVideoMenu="@showVideoMenu"
                CoverUrl="@detail.CoverUrl"
                LogoUrl="@detail.LogoUrl"    
            />
            @if (chosenSubDetail == SubDetail.General)
            {
                <DetailGeneral Detail="@detail" />
            }
            else if (chosenSubDetail == SubDetail.Layout)
            {
                <DetailLayout Layouts="@layouts" 
                    Name="@detail.Name" 
                    CoverImageUrl="@detail.CoverUrl" />
            }
            else if (chosenSubDetail == SubDetail.Video)
            {
                <DetailVideoShowcase Videos="@videos" 
                    Name="@detail.Name" />
            }
            else
            {
                <DetailGallery Images=@images />
            }
        </div>

        <div class="back-button">
            <button type="button"
                class="@((!string.IsNullOrEmpty(OriginPage) ? "btn btn-danger" : "btn btn-primary"))" 
                @onclick="() => GoBack()">
                <span class="bi bi-arrow-left-square" style="margin-right: 4px;"></span> 
                @((!string.IsNullOrEmpty(OriginPage) ? "Back" : "Browse Race Tracks"))
            </button>
        </div>
    }
</div>

@code {
    [Parameter]
    public string slug { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "origin_page")]
    public string OriginPage { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "origin_category")]
    public string OriginCategory { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "origin_sort")]
    public string OriginSort { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "origin_mode")]
    public string OriginMode { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "selected_subdetail")]
    public string selected_subdetail { get; set; } = "";

    private TrackDetail detail = new();
    private List<TrackLayout> layouts = new();
    private List<TrackVideo> videos = new();
    private List<TrackImage> images = new();

    private string subheaderInfoText = "View general information of --this race track--";
    private SubDetail chosenSubDetail = SubDetail.General;
    
    private bool showVideoMenu = true;
    private string errorMessage = "";
    private bool showError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        PreselectSubdetail(selected_subdetail);
        ValidateSubdetailMenuActivation();
    }

    private async Task LoadData()
    {
        await LoadDetail(slug);
        CheckError();
    }

    private async Task LoadDetail(string slug)
    {
        var data = await TrackDetailService.GetTrackDetail(slug);
        detail = data;
        layouts.AddRange(detail.Layouts);
        images.AddRange(detail.Images);
        videos.AddRange(detail.Videos);

        ChangeSubheaderInfoText(detail.Name ?? "");
    }

    private void OnBackSidebarClickedHandler()
    {
        GoBack();
    }

    private void OnSubDetailChangedHandler(SubDetail subDetail)
    {
        chosenSubDetail = subDetail;

        ChangeSubheaderInfoText(detail.Name ?? "");
        ChangeSelectedSubdetailLink();
    }

    private void ChangeSubheaderInfoText(string trackName)
    {
        switch (chosenSubDetail)
        {
            case SubDetail.General:
                subheaderInfoText = $"View general information of {trackName}";
                break;
            case SubDetail.Layout:
                subheaderInfoText = $"View available layout configurations on {trackName}";
                break;
            case SubDetail.Video:
                subheaderInfoText = $"View race video(s), time trial video(s), or other driving actions on {trackName}";
                break;
            default:
                subheaderInfoText = $"View gallery of {trackName}";
                break;
        }
    }

    private void ChangeSelectedSubdetailLink()
    {
        switch (chosenSubDetail)
        {
            case SubDetail.General:
                NavigationManager
                    .NavigateTo(
                        NavigationManager.GetUriWithQueryParameter(
                        "selected_subdetail", SelectedSubdetail.General), 
                        false, 
                        true);
                break;
            case SubDetail.Layout:
                NavigationManager
                    .NavigateTo(
                        NavigationManager.GetUriWithQueryParameter(
                        "selected_subdetail", SelectedSubdetail.Layout), 
                        false, 
                        true);
                break;
            case SubDetail.Video:
                NavigationManager
                    .NavigateTo(
                        NavigationManager.GetUriWithQueryParameter(
                        "selected_subdetail", SelectedSubdetail.Showcase), 
                        false, 
                        true);
                break;
            case SubDetail.Image:
                NavigationManager
                    .NavigateTo(NavigationManager.GetUriWithQueryParameter(
                        "selected_subdetail", SelectedSubdetail.Gallery), 
                        false, 
                        true);
                break;
            default:
                NavigationManager.NavigateTo(NavigationManager.Uri);
                break;
        }
    }

    private void PreselectSubdetail(string subdetail)
    {
        switch (selected_subdetail)
        {
            case SelectedSubdetail.General:
                chosenSubDetail = SubDetail.General;
                break;
            case SelectedSubdetail.Layout:
                chosenSubDetail = SubDetail.Layout;
                break;
            case SelectedSubdetail.Showcase:
                chosenSubDetail = SubDetail.Video;
                break;
            case SelectedSubdetail.Gallery:
                chosenSubDetail = SubDetail.Image;
                break;
        }

        ChangeSubheaderInfoText(detail.Name ?? "");
    }

    private void ValidateSubdetailMenuActivation()
    {
        showVideoMenu = videos.Count() > 0 ? true : false;
    }

    private void GoBack()
    {
        if (string.IsNullOrEmpty(OriginPage))
            OriginPage = "browse";

        if (string.IsNullOrEmpty(OriginCategory))
            OriginCategory = BrowseCategory.Categories[0]; // all

        if (string.IsNullOrEmpty(OriginSort))
            OriginSort = BrowseSortQuery.Alphabetical;

        if (string.IsNullOrEmpty(OriginMode))
            OriginMode = BrowseModeQuery.GalleryMode;

        switch (OriginPage)
        {
            case "home":
                NavigationManager.NavigateTo("/");
                break;
            case "browse":
                NavigationManager.NavigateTo($"/browse?mode={OriginMode}&sort={OriginSort}&category={OriginCategory}");
                break;
            default:
                NavigationManager.NavigateTo($"/browse");
                break;
        }
    }

    private void CheckError()
    {
        errorMessage = TrackDetailService.GetRecentErrorMessage();
        showError = string.IsNullOrWhiteSpace(errorMessage) ? false : true;
    }

    private async Task OnTryAgainHandler()
    {
        showError = false;

        await LoadData();
    }
}