@page "/devmode/gallery"
@using GTRouteApp.Data
@inject DevModeService DevModeService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Dev Mode - Manage Gallery</PageTitle>

<div class="manage-gallery-container">
    <div class="form-nav">
        <button type="button" class="btn btn-primary" @onclick="BackToList">
            <span class="bi bi-arrow-left-square-fill"></span> Back
        </button>
    </div>

    <div class="form-content">
        <div class="form-title">
            <h5>Manage Gallery for @TrackName</h5>
        </div>

        <EditForm Model="@editModel" OnValidSubmit="SubmitImage">
            <div class="gallery-form-group">
                <div class="form-group-1">
                    <div class="form-img">
                        <img src="@previewImageUrl" alt="Preview image" />
                    </div>
                </div>

                <div class="form-group-2">
                    <div class="form-block-row">
                        <form class="form-floating">
                            <InputText @bind-Value="editModel.Name" 
                                class="form-control" 
                                placeholder="Insert image name" />
                            <label>Image Name</label>
                        </form>
                        <ValidationMessage For="@(() => editModel.Name)" />
                    </div>

                    <div class="form-block-row">
                        <form class="form-floating">
                            <InputText @bind-Value="editModel.Author"
                                class="form-control"
                                placeholder="Insert author or source of the image" />
                            <label>Author / Source</label>
                        </form>
                        <ValidationMessage For="@(() => editModel.Author)" />
                    </div>

                    <div class="form-block-row">
                        <form class="form-floating">
                            <InputText @bind-Value="editModel.ImageUrl"
                                @onfocusout="SetPreviewImage"
                                class="form-control"
                                placeholder="Insert url to the image" />
                            <label>Image Url</label>
                        </form>
                        <ValidationMessage For="@(() => editModel.ImageUrl)" />
                    </div>

                    <p style="font-size: 12px; margin-bottom: 8px;">
                        *Instruction for Image Url: Insert a url image and then check if a url is 
                        valid and able to show image inside box on the left
                    </p>
                </div>
            </div>

            <div class="form-group-0">
                <div class="form-block-row">
                    <form class="form-floating">
                        <InputTextArea @bind-Value="editModel.Description"
                            class="form-control"
                            style="height: 140px;"
                            placeholder="Insert description of the image" />
                        <label>Description</label>
                    </form>
                    <ValidationMessage For="@(() => editModel.Description)" />
                </div>

                <div class="form-flex-row">
                    <button type="submit" class="btn btn-success">
                        <span class="bi bi-plus-lg"></span> Add
                    </button>
                </div>
            </div>

            <DataAnnotationsValidator />
        </EditForm>

        <div class="gallery-view">
            @if (images.Count() > 0)
            {
                <DevModeGalleryView Images="@images" OnDelete="HandleImageDeletion" />
            }
            else
            {
                <div class="form-title">
                    <p><i>Currently, no image for this race track.</i></p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "slug")]
    public string Slug { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "name")]
    public string TrackName { get; set; } = "";

    private List<TrackImage> images = new();
    private GalleryEditModel editModel = new();
    private string previewImageUrl = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadImages(Slug);
        SetDefaultForm();
    }

    private void BackToList()
    {
        NavigationManager.NavigateTo("/devmode/list");
    }

    private void SetPreviewImage()
    {
        previewImageUrl = editModel.ImageUrl ?? "";
    }

    private async Task LoadImages(string slug)
    {
        images.Clear();
        
        var fetched = await DevModeService.GetImagesBySlug(slug);
        images.AddRange(fetched);
    }

    private async Task SubmitImage()
    {
        var response = await DevModeService.PostNewImage(editModel, Slug);
        await ShowAlert(response);

        var isSuccess = DevModeService.GetPostStatus();
        if (isSuccess)
        {
            ClearForm();
            // refresh list of layouts
            await LoadImages(Slug);
        }
    }

    private async Task HandleImageDeletion(int index)
    {
        var imageName = images.ElementAt(index).ImageName;

        await DeleteImage(imageName);
    }

    private async Task DeleteImage(string? name)
    {
        var response = await DevModeService.DeleteImage(Slug, name ?? "");
        await ShowAlert(response);

        // refresh list of layouts
        await LoadImages(Slug);
    }

    private void SetDefaultForm()
    {
        editModel.Author = "gtroad-admin";
        editModel.Description = "Picture of (track name - layout name(optional)) from Gran Turismo 7 (2022).";
    }

    private void ClearForm()
    {
        editModel = new();
        SetPreviewImage();
        SetDefaultForm();
    }

    private async Task ShowAlert(string errorMessage)
    {
        await JS.InvokeVoidAsync("showAlert", errorMessage);
    }
}