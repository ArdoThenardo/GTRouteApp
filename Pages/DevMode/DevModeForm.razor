@page "/devmode/form"
@using GTRouteApp.Data
@inject DevModeService DevModeService
@inject RaceTrackService RaceTrackService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Dev Mode - Add New Track</PageTitle>

<div class="track-form-container">
    <div class="track-form-nav">
        <button type="button" class="btn btn-primary" @onclick="BackToList">
            <span class="bi bi-arrow-left-square-fill"></span> Back
        </button>
    </div>

    <div class="track-form-content">
        <EditForm Model=@editModel OnValidSubmit="PostNewTrack">
            @if (IsEdit)
            {
                <h3>Edit @editModel.Name</h3>
            }
            else
            {
                <h3>Add New Track</h3>
            }

            <div class="track-form-row">
                <div class="form-w70">
                    <form class="form-floating">
                        <InputText @bind-Value="editModel.Name" class="form-control" placeholder="Insert track name" />
                        <label>Track Name</label>
                    </form>
                    <ValidationMessage For="@(() => editModel.Name)" />
                </div>

                <div class="form-w30">
                    <form class="form-floating">
                        <InputSelect @bind-Value="editModel.CountryCode" class="form-select" placeholder="Select a country">
                            <option value="">Select a country</option>
                            @foreach (var country in countrySelection)
                            {
                                <option value="@country.code">@country.name</option>
                            }
                        </InputSelect>
                        <label>Country</label>
                    </form>
                    <ValidationMessage For="@(() => editModel.CountryCode)" />
                </div>
            </div>

            <div class="track-form-row" style="height: 200px;">
                <div class="form-img form-w35">
                    <form class="form-floating" style="width:100%; height:100%;">
                        <img src="@previewLogoUrl" alt="Preview Logo Url">
                    </form>
                </div>
                <div class="form-img form-w65">
                    <form class="form-floating" style="width:100%; height:100%;">
                        <img src="@previewCoverUrl" alt="Preview Cover Url">
                    </form>
                </div>
            </div>

            <div class="track-form-row">
                <div class="form-w35">
                    <form class="form-floating">
                        <InputText 
                            @bind-Value="editModel.LogoUrl" 
                            @onfocusout="SetPreviewLogo"
                            class="form-control" 
                            placeholder="Insert track logo image url" />
                        <label>Logo Url</label>
                    </form>
                    <ValidationMessage For="@(() => editModel.LogoUrl)" />
                </div>

                <div class="form-w65">
                    <form class="form-floating">
                        <InputText 
                            @bind-Value="editModel.CoverUrl"
                            @onfocusout="SetPreviewCover" 
                            class="form-control" 
                            placeholder="Insert cover image url" />
                        <label>Cover Url</label>
                    </form>
                    <ValidationMessage For="@(() => editModel.CoverUrl)" />
                </div>
            </div>

            <p style="font-size: 12px;">
                *Instruction for Logo Url & Cover Url: Insert a url image and then check if a url is 
                valid and able to show image inside box above the form
            </p>

            <div class="track-form-row">
                <div class="form-w40">
                    <form class="form-floating">
                        <InputSelect @bind-Value="editModel.Category" class="form-select" placeholder="Select a track category">
                            <option value="">Select a track category</option>
                            @foreach (var category in categorySelection)
                            {
                                <option value="@category">@category</option>
                            }
                        </InputSelect>
                        <label>Category</label>
                    </form>
                    <ValidationMessage For="@(() => editModel.Category)" />
                </div>

                <div class="form-w40">
                    <form class="form-floating">
                        <InputSelect @bind-Value="editModel.RoadType" class="form-select" placeholder="Select a track road surface type">
                            <option value="">Select a track road surface type</option>
                            @foreach (var roadType in roadTypeSelection)
                            {
                                <option value="@roadType">@roadType</option>
                            }
                        </InputSelect>
                        <label>Road Type</label>
                    </form>
                    <ValidationMessage For="@(() => editModel.RoadType)" />
                </div>

                <div class="form-w20">
                    <form class="form-floating">
                        <InputSelect @bind-Value="editModel.NumberOfLayouts" class="form-select" placeholder="Select number of layouts available on track">
                            <option value="0">0</option>
                            @for (int num = 1; num <= 10; num++)
                            {
                                <option value="@num">@num</option>
                            }
                        </InputSelect>
                        <label>No. of Layouts</label>
                    </form>
                    <ValidationMessage For="@(() => editModel.NumberOfLayouts)" />
                </div>
            </div>

            <div class="track-form-row">
                <ValidationMessage For="@(() => passcode)" />
                <form>
                    <input type="password" class="form-control" @bind-value="passcode" placeholder="Insert a passcode">
                </form>
                <button type="submit" class="@submitButtonClass">
                    <span class="@submitIconClass"></span> @submitString
                </button>
            </div>

            <DataAnnotationsValidator />
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "isEdit")] 
    public bool IsEdit { get; set; } = false;

    [Parameter]
    [SupplyParameterFromQuery(Name = "slug")] 
    public string slug { get; set; } = "";

    private RaceTrackEditModel editModel = new();
    private List<Country> countrySelection = new();
    private string[] categorySelection = new string[] { "Original Circuit", "Real Circuit", "City Circuit", "Dirt Circuit", "Snow Circuit" };
    private string[] roadTypeSelection = new string[] { "Tarmac", "Dirt", "Snow" };
    private string passcode = "";
    private string previewLogoUrl = "";
    private string previewCoverUrl = "";
    private string submitButtonClass = "btn btn-success";
    private string submitIconClass = "bi bi-plus-lg";
    private string submitString = "Add";

    protected override async Task OnInitializedAsync()
    {
        await FormInitialization();
    }

    private async Task FormInitialization()
    {
        await GetCountryList();
        if (IsEdit)
        {
            submitButtonClass = "btn btn-primary";
            submitIconClass = "bi bi-pencil-square";
            submitString = "Save";

            await SetExistingEditModel(slug);
        }
        await CheckError();
    }

    private async Task PostNewTrack()
    {
        var isFormValid = await ValidateForm();

        if (isFormValid)
        {
            var response = await DevModeService.PostNewTrack(editModel);
            await ShowAlert(response);

            var isPostSuccess = DevModeService.GetPostStatus();
            if (isPostSuccess)
            {
                NavigationManager.NavigateTo("/devmode/list");
            }
        }
    }

    private async Task<bool> ValidateForm()
    {
        if (!string.IsNullOrWhiteSpace(passcode))
        {
            var isPasscodeValid = await DevModeService.ValidatePassCode(passcode);

            if (!isPasscodeValid)
            {
                await CheckError();

                return false;
            }
            
            return true;
        }
        else
        {
            await ShowAlert("Please enter the passcode and try again");

            return false;
        }
    }

    private async Task SetExistingEditModel(string slug)
    {
        var track = await RaceTrackService.GetTrackDetail(slug);
        
        editModel.Name = track.Name;
        editModel.CountryCode = track.Country?.code;
        editModel.LogoUrl = track.LogoUrl;
        editModel.CoverUrl = track.CoverUrl;
        editModel.Category = track.Category;
        editModel.RoadType = track.RoadType;
        editModel.NumberOfLayouts = track.NumberOfLayouts;

        SetPreviewLogo();
        SetPreviewCover();
    }

    private async Task GetCountryList()
    {
        var fetchedList = await DevModeService.GetCountryList();

        countrySelection.AddRange(fetchedList);
    }

    private void SetPreviewLogo()
    {
        previewLogoUrl = editModel.LogoUrl ?? "";
    }

    private void SetPreviewCover()
    {
        previewCoverUrl = editModel.CoverUrl ?? "";
    }

    private void BackToList()
    {
        NavigationManager.NavigateTo("/devmode/list");
    }

    private async Task CheckError()
    {
        var errorMessage = DevModeService.GetRecentErrorMessage();

        if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            await ShowAlert(errorMessage);
        }
    }

    private async Task ShowAlert(string errorMessage)
    {
        await JS.InvokeVoidAsync("showAlert", errorMessage);
    }
}