@page "/devmode/list"
@using GTRouteApp.Data
@inject RaceTrackService RaceTrackService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable

<PageTitle>Dev Mode - List</PageTitle>

@if (tracks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="list-container">
        <div class="list-header">
            <button type="button" class="btn btn-success" @onclick="AccessAddNewTrack"><span class="bi bi-plus-lg"></span> Add New Track</button>
            <button type="button" class="btn btn-warning"><span class="bi bi-send-fill"></span> Export All Data to JSON</button>
        </div>
        
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Country</th>
                        <th>Category</th>
                        <th>
                            <span data-bs-toggle="tooltip" 
                                data-bs-placement="top"
                                data-bs-html="true" 
                                title="<span class='bi bi-pencil-square'></span> Edit Track<br>
                                    <span class='bi bi-trash-fill'></span> Delete Track" 
                                @ref="itemButtonsRef">
                                <span class="bi bi-question-circle"></span>
                            </span>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var track in tracks)
                    {
                        <tr>
                            <td>
                                <div style="display: flex;">
                                    <img 
                                        src="@track.LogoUrl" 
                                        alt="@track.Name"
                                        style="width: 6vw; margin-right: 8px;" 
                                    />
                                    @track.Name
                                </div>
                            </td>
                            <td>
                                <span class="fi fi-@track.Country?.code" style="margin-right: 8px;"></span>
                                @track.Country?.name
                            </td>
                            <td>@track.Category</td>
                            <td>
                                <button type="button" class="btn btn-primary" @onclick="() => EditTrack(track.Slug!)"><span class="bi bi-pencil-square"></span></button>
                                <button type="button" class="btn btn-danger"><span class="bi bi-trash-fill"></span></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<RaceTrack> tracks = new();

    private const string devmodeListJSPath = "./Pages/DevMode/DevModeList.razor.js";
    private Lazy<IJSObjectReference> devmodeListJS = new();
    ElementReference itemButtonsRef;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadTracks();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            devmodeListJS = new(await JS.InvokeAsync<IJSObjectReference>("import", devmodeListJSPath));
            await devmodeListJS.Value.InvokeVoidAsync("initializeTooltips", itemButtonsRef);
        }
    }

    private async Task LoadTracks()
    {
        var fetched = await RaceTrackService.GetTracks();

        tracks.AddRange(fetched);
    }

    private void AccessAddNewTrack()
    {
        NavigationManager.NavigateTo("/devmode/form");
    }

    private async Task EditTrack(string slug)
    {
        await HideTooltips();
        
        NavigationManager.NavigateTo($"/devmode/form?isEdit={true}&slug={slug}");
    }

    private async Task HideTooltips()
    {
        await devmodeListJS.Value.InvokeVoidAsync("hideTooltips");
    }

    public async ValueTask DisposeAsync()
    {
        if (devmodeListJS.IsValueCreated)
        {
            await devmodeListJS.Value.DisposeAsync();
        }
    }
}