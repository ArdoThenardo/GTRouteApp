@using GTRouteApp.Helpers
@namespace GTRouteApp.BrowseComponents
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="subheader-container">
    <div class="subheader-info">
        <span class="bi bi-info-square-fill" style="margin-right: 6px;"></span>@Info
    </div>

    <div class="subheader-options">
        <span class="bi bi-gear-fill setting-icon"></span>

        <div class="subheader-category-selection">
            <span class="bi bi-tags-fill"></span>
            <div class="subheader-category-value">
                <p>@selectedCategory</p>
                <button type="button" 
                    class="btn btn-category-change" 
                    title="Change Category"
                    @onclick="() => SelectCategory()">
                    <span class="bi bi-caret-down-fill"></span><p>Select</p>
                </button>
            </div>
        </div>

        <button type="button" class="btn btn-selection btn-subheader-2" 
            title="Sort Race Tracks"
            @onclick="() => SortSelection()">
            @switch (SelectedSort)
            {
                case BrowseSort.Alphabetical:
                    <span class="bi bi-sort-alpha-down"></span>
                    break;
                case BrowseSort.AlphabeticalReverse:
                    <span class="bi bi-sort-alpha-up"></span>
                    break;
                case BrowseSort.Standard:
                    <span class="bi bi-sort-down"></span>
                    break;
                case BrowseSort.StandardReverse:
                    <span class="bi bi-sort-up"></span>
                    break;
                default:
                    <span class="bi bi-sort-alpha-down"></span>
                    break;
            }
            | <span class="bi bi-caret-down-fill"></span>
            <BrowseTooltip Text="Change Sort setting" 
                WidthInPx="160" 
                TopPositionInPx="122" 
                RightPositionInPx="70" />
        </button>

        <button type="button" class="btn btn-selection btn-subheader"
            title="Change view mode" 
            @onclick="() => ModeSelection()">
            @switch (SelectedModeQuery)
            {
                case BrowseModeQuery.GalleryMode:
                    <span class="bi bi-image-fill"></span>
                    break;
                case BrowseModeQuery.ListMode:
                    <span class="bi bi-list-task"></span>
                    break;
                case BrowseModeQuery.GridMode:
                    <span class="bi bi-grid-3x3-gap-fill"></span>
                    break;
                default:
                    <span class="bi bi-image-fill"></span>
                    break;
            }
            | <span class="bi bi-caret-down-fill"></span>
            <BrowseTooltip Text="Change View setting" 
                WidthInPx="160" 
                TopPositionInPx="122" 
                RightPositionInPx="8" />
        </button>

        <div class="subheader-view-options">
            <button type="button" class="btn btn-selection" 
                @onclick="() => SwitchMode(BrowseMode.Gallery)"
                title="Switch to Gallery View"
                disabled=@disableGallery>
                <span class="bi bi-image-fill" style="margin-left: 4px;"></span>
                <BrowseTooltip Text="Gallery View" 
                    WidthInPx="110" 
                    TopPositionInPx="122" 
                    RightPositionInPx="70" />
            </button>

            <button type="button" class="btn btn-selection"
                @onclick="() => SwitchMode(BrowseMode.List)"
                title="Switch to List View"
                disabled=@disableList>
                <span class="bi bi-list-task"></span>
                <BrowseTooltip Text="List View" 
                    WidthInPx="90" 
                    TopPositionInPx="122" 
                    RightPositionInPx="40" />
            </button>

            <button type="button" class="btn btn-selection" style="padding-left: 10px;" 
                @onclick="() => SwitchMode(BrowseMode.Grid)"
                title="Switch to Grid View"
                disabled=@disableGrid>
                <span class="bi bi-grid-3x3-gap-fill" style="margin-right: 4px;"></span>
                <BrowseTooltip Text="Grid View" 
                    WidthInPx="95" 
                    TopPositionInPx="122" 
                    RightPositionInPx="8" />
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Info { get; set; } = "";

    [Parameter]
    public EventCallback<string> OnCategoryChanged { get; set; }

    [Parameter]
    public EventCallback<BrowseSort> OnSortChanged { get; set; }

    [Parameter]
    public EventCallback<BrowseMode> ChosenBrowseMode { get; set; }

    [Parameter]
    public BrowseSort SelectedSort { get; set; } = BrowseSort.Alphabetical;

    [Parameter]
    public string SelectedModeQuery { get; set; } = ""; // use BrowseModeQuery

    [Parameter]
    public string selectedCategory { get; set; } = "";

    private bool disableGallery = true;
    private bool disableList = false;
    private bool disableGrid = false;

    [CascadingParameter] 
    public IModalService CategorySelectionModal { get; set; } = default!;
    [CascadingParameter]
    public IModalService SortSelectionModal { get; set; } = default!;
    [CascadingParameter]
    public IModalService ModeSelectionModal { get; set; } = default!;

    private ModalOptions modalOptions = new ModalOptions()
    {
        Class = "custom-blazored-modal",
        Size = ModalSize.Automatic,
        Position = ModalPosition.Middle,
        HideHeader = true
    };

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrWhiteSpace(SelectedModeQuery))
        {
            switch (SelectedModeQuery)
            {
                case BrowseModeQuery.GalleryMode:
                    disableGallery = true;
                    disableList = false;
                    disableGrid = false;
                    break;
                case BrowseModeQuery.ListMode:
                    disableGallery = false;
                    disableList = true;
                    disableGrid = false;
                    break;
                case BrowseModeQuery.GridMode:
                    disableGallery = false;
                    disableList = false;
                    disableGrid = true;
                    break;
            }
        }
    }

    private async Task SelectCategory()
    {
        var modal = CategorySelectionModal.Show<BrowseCategorySelection>(
            "Category Selection", 
            new ModalParameters().Add(nameof(BrowseCategorySelection.CurrentCategory), selectedCategory), 
            modalOptions);
        var result = await modal.Result;

        if (result.Confirmed && result.Data != null)
        {
            selectedCategory = result.Data.ToString() ?? "";
            await OnCategoryChanged.InvokeAsync(selectedCategory);
        }
    }

    private async Task SortSelection()
    {
        var modal = SortSelectionModal.Show<BrowseSortSelection>(
            "Sort Selection", 
            new ModalParameters().Add(nameof(BrowseSortSelection.SelectedSort), SelectedSort),
            modalOptions);
        var result = await modal.Result;

        if (result.Confirmed && result.Data != null)
        {
            SelectedSort = (BrowseSort) result.Data;
            await OnSortChanged.InvokeAsync(SelectedSort);
        }
    }

    private async Task ModeSelection()
    {
        var modal = ModeSelectionModal.Show<BrowseModeSelection>(
            "Mode Selection", 
            new ModalParameters().Add(
                nameof(BrowseModeSelection.SelectedModeQuery), 
                    !string.IsNullOrEmpty(SelectedModeQuery) ? SelectedModeQuery : BrowseModeQuery.GalleryMode), 
            modalOptions);
        var result = await modal.Result;

        if (result.Confirmed && result.Data != null)
        {
            var selectedMode = (BrowseMode) result.Data;
            await SwitchMode(selectedMode);
        }
    }

    private async Task SwitchMode(BrowseMode mode)
    {
        disableGallery = disableGallery ? false : true;
        disableList = disableList ? false : true;
        disableGrid = disableGrid ? false : true;

        await ChosenBrowseMode.InvokeAsync(mode);
    }
}