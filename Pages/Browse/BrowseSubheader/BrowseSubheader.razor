@using GTRouteApp.Helpers
@namespace GTRouteApp.BrowseComponents
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="subheader-container">
    <div class="subheader-info">
        <span class="bi bi-info-square-fill" style="margin-right: 6px;"></span>@Info
    </div>

    <div class="subheader-options">
        <span class="bi bi-gear-fill setting-icon"></span>

        <div class="subheader-category-selection">
            <span class="bi bi-tags-fill"></span>
            <div class="subheader-category-value">
                <p>@selectedCategory</p>
                <button type="button" 
                    class="btn btn-category-change" 
                    title="Change Category"
                    @onclick="() => SelectCategory()">
                    <span class="bi bi-caret-down-fill"></span><p>Select</p>
                </button>
            </div>
        </div>

        <div class="subheader-view-options">
            <button type="button" class="btn btn-selection" 
                @onclick="() => SwitchMode(BrowseMode.Gallery)"
                title="Switch to Gallery View"
                disabled=@disableGallery>
                <span class="bi bi-image-fill" style="margin-left: 4px;"></span>
            </button>
            <button type="button" class="btn btn-selection"
                @onclick="() => SwitchMode(BrowseMode.List)"
                title="Switch to List View"
                disabled=@disableList>
                <span class="bi bi-list-task"></span>
            </button>
            <button type="button" class="btn btn-selection" style="padding-left: 10px;" 
                @onclick="() => SwitchMode(BrowseMode.Grid)"
                title="Switch to Grid View"
                disabled=@disableGrid>
                <span class="bi bi-grid-3x3-gap-fill" style="margin-right: 4px;"></span>
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Info { get; set; } = "";

    [Parameter]
    public EventCallback<string> OnCategoryChanged { get; set; }

    [Parameter]
    public EventCallback<BrowseMode> ChosenBrowseMode { get; set; }

    [Parameter]
    public string preselect_mode { get; set; } = ""; // gallery or grid

    [Parameter]
    public string selectedCategory { get; set; } = "";

    private bool disableGallery = true;
    private bool disableList = false;
    private bool disableGrid = false;

    [CascadingParameter] 
    public IModalService CategorySelectionModal { get; set; } = default!;

    private ModalOptions modalOptions = new ModalOptions()
    {
        Class = "custom-blazored-modal",
        Size = ModalSize.Automatic,
        Position = ModalPosition.Middle,
        HideHeader = true
    };

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrWhiteSpace(preselect_mode))
        {
            if (preselect_mode.Equals("gallery"))
            {
                disableGallery = true;
                disableList = false;
                disableGrid = false;
            }
            else if (preselect_mode.Equals("grid"))
            {
                disableGallery = false;
                disableList = false;
                disableGrid = true;
            }
            else if (preselect_mode.Equals("list"))
            {
                disableGallery = false;
                disableList = true;
                disableGrid = false;
            }
        }
    }

    private async Task SelectCategory()
    {
        var modal = CategorySelectionModal.Show<BrowseCategorySelection>(
            "Category Selection", 
            new ModalParameters().Add(nameof(BrowseCategorySelection.CurrentCategory), selectedCategory), 
            modalOptions);
        var result = await modal.Result;

        if (result.Confirmed && result.Data != null)
        {
            selectedCategory = result.Data.ToString() ?? "";
            await OnCategoryChanged.InvokeAsync(selectedCategory);
        }
    }

    private async Task SwitchMode(BrowseMode mode)
    {
        disableGallery = disableGallery ? false : true;
        disableList = disableList ? false : true;
        disableGrid = disableGrid ? false : true;

        await ChosenBrowseMode.InvokeAsync(mode);
    }
}