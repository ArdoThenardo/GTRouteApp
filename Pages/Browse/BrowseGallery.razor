@using GTRouteApp.Data
@inject RaceTrackService RaceTrackService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="gallery-container">
    @if (tracks == null || tracks.Count == 0)
    {
        @if (showError)
        {
            <p>@errorMessage</p>
        }
        else
        {
            <div class="loading-traditional"></div>
        }
    }
    else
    {
        <div @ref="highlightCoverRef" class="gallery-highlight" style="--bg-cover: url('@tracks.ElementAt(selectedIndex).CoverUrl');">
            <div class="highlight-section-1">
                <p>
                    <span class="fi fi-@tracks.ElementAt(selectedIndex).Country?.code"></span>
                    <span @ref="section1CountryRef" class="section-1-country-span">@tracks.ElementAt(selectedIndex).Country?.name</span>
                </p>
                <img
                    src="@tracks.ElementAt(selectedIndex).LogoUrl"
                    alt="@tracks.ElementAt(selectedIndex).LogoUrl"
                    @ref="section1LogoRef"
                />
            </div>
            <div class="highlight-section-2">
                <div class="section-2-left">
                    <p>
                        <span @ref="section2NameRef">@tracks.ElementAt(selectedIndex).Name</span>
                    </p>
                    <p>Category</p>
                    <p>
                        <span @ref="section2CategoryRef">@tracks.ElementAt(selectedIndex).Category</span>
                    </p>
                    <p>No. Of Layouts</p>
                    <p>
                        <span @ref="section2LayoutRef">@tracks.ElementAt(selectedIndex).NumberOfLayouts</span>
                    </p>
                </div>
                <button type="button" 
                    class="btn btn-success"
                    @onclick="@(() => AccessTrackDetail(tracks.ElementAt(selectedIndex).Slug!))">
                    View Track
                </button>
            </div>
        </div>
        <div class="gallery-selection">
            @foreach(var track in tracks.Select((trackData, index) => (trackData, index)))
            {
                @if (selectedIndex == track.index)
                {
                    <div class="gallery-item-container-selected" 
                        style="background-image: url(@track.trackData.CoverUrl);">
                        <div class="gallery-item-content-selected">
                            <img
                                src="@track.trackData.LogoUrl"
                                alt="@track.trackData.Name"
                            />
                        </div>
                    </div>
                }
                else
                {
                    <div class="gallery-item-container" 
                        style="background-image: url(@track.trackData.CoverUrl);" 
                        @onclick="() => SetSelection(track.index)">
                        <div class="gallery-item-content">
                            <img
                                src="@track.trackData.LogoUrl"
                                alt="@track.trackData.Name"
                            />
                        </div>
                    </div>
                }
            }
            <div class="more-notice">
                <p>More race tracks will be added<br>in the future</p>
            </div>
        </div>
    }
</div>

@code {
    private List<RaceTrack> tracks = new();
    private int selectedIndex = 0;
    
    private string errorMessage = "";
    private bool showError = false;

    ElementReference highlightCoverRef, section1CountryRef, section1LogoRef;
    ElementReference section2NameRef, section2CategoryRef, section2LayoutRef;

    protected override async Task OnInitializedAsync()
    {
        await LoadTracks();
        CheckError();
    }

    private async Task LoadTracks()
    {
        tracks = await RaceTrackService.GetTracks();
    }

    private async Task SetSelection(int index)
    {
        selectedIndex = index;

        await ResetHighlightAnimationWithJS();
    }

    private void AccessTrackDetail(string slug)
    {
        NavigationManager.NavigateTo($"/browse/detail/{slug}?origin=browseGallery");
    }

    private void CheckError()
    {
        errorMessage = RaceTrackService.GetRecentErrorMessage();
        showError = string.IsNullOrWhiteSpace(errorMessage) ? false : true;
    }

    private async Task ResetHighlightAnimationWithJS()
    {
        await JS.InvokeVoidAsync("resetAnimationByReinsertClassName", highlightCoverRef, "gallery-highlight");
        await JS.InvokeVoidAsync("resetAnimationByStyle", section1CountryRef);
        await JS.InvokeVoidAsync("resetAnimationByStyle", section1LogoRef);
        await JS.InvokeVoidAsync("resetAnimationByStyle", section2NameRef);
        await JS.InvokeVoidAsync("resetAnimationByStyle", section2CategoryRef);
        await JS.InvokeVoidAsync("resetAnimationByStyle", section2LayoutRef);
    }
}