@using GTRouteApp.Data
@inject NavigationManager NavigationManager

<div class="grid-container">
    <div class="grid-list">
        @foreach (var track in Tracks.Select((trackData, index) => (trackData, index)))
        {
            <div class="item-container">
                <div class="item-content"
                    style="background-image: url(@track.trackData.CoverUrl); --delay: @track.index;"
                    @onclick="() => AccessTrackDetail(track.trackData.Slug!)">
                    <div class="content-section-1">
                        <img 
                            src="@track.trackData.LogoUrl"
                            alt="@track.trackData.LogoUrl"
                        />
                        <p>@track.trackData.Name</p>
                    </div>
                    <div class="content-section-2">
                        <p>
                            <span class="fi fi-@track.trackData.Country?.code" style="margin-right: 6px;"></span>
                            <span>@track.trackData.Category</span>
                        </p>
                    </div>
                </div>
            </div>
        }
        @if (IsMaximum)
        {
            <div class="more-notice-container">
                <div class="more-notice" style="--delay: @Tracks.Count();">
                    <p>More race tracks will be added<br>in the future</p>
                </div>
            </div>
        }
    </div>
    @if (!IsMaximum)
    {
        <div class="load-more-container">
            <button type="button" 
                class="@loadMoreBtnClass"
                @onclick="@(() => LoadMoreTracks())">
                @loadMoreBtnText
            </button>
            @if (IsLoadMoreError)
            {
                <p style="margin-inline: 10px; margin-top: 10px;">
                    There was a problem when trying to load more race tracks. Please try again.
                </p>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public List<RaceTrack> Tracks { get; set; } = new();

    [Parameter]
    public bool IsMaximum { get; set; } = false;

    [Parameter]
    public bool IsLoadMoreError { get; set; } = false;

    [Parameter]
    public EventCallback OnLoadMoreClicked { get; set; }

    private string loadMoreBtnClass = "";
    private string loadMoreBtnText = "";

    protected override void OnParametersSet()
    {
        loadMoreBtnClass = !IsLoadMoreError ? "btn btn-primary btn-more" : "btn btn-warning btn-more";
        loadMoreBtnText = !IsLoadMoreError ? "Load More" : "Try Again";
    }

    private void AccessTrackDetail(string slug)
    {
        NavigationManager.NavigateTo($"/browse/detail/{slug}?origin=browseGrid");
    }

    private async Task LoadMoreTracks()
    {
        await OnLoadMoreClicked.InvokeAsync();
    }
}