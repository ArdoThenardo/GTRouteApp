@using GTRouteApp.Models
@using GTRouteApp.Helpers
@namespace GTRouteApp.Components.Browse
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="gallery-container">
    <div @ref="highlightCoverRef" class="gallery-highlight" style="--bg-cover: url('@Tracks.ElementAt(selectedIndex).CoverUrl');">
        <div class="highlight-section-1">
            <p>
                <span class="fi fi-@Tracks.ElementAt(selectedIndex).Country?.code"></span>
                <span @ref="section1CountryRef" class="section-1-country-span">@Tracks.ElementAt(selectedIndex).Country?.name</span>
            </p>
            <img
                src="@Tracks.ElementAt(selectedIndex).LogoUrl"
                alt="@Tracks.ElementAt(selectedIndex).LogoUrl"
                @ref="section1LogoRef"
            />
        </div>
        <div class="highlight-section-2">
            <div class="section-2-left">
                <p>
                    <span @ref="section2NameRef">@Tracks.ElementAt(selectedIndex).Name</span>
                </p>
                <p>Category</p>
                <p>
                    <span @ref="section2CategoryRef">@Tracks.ElementAt(selectedIndex).Category</span>
                </p>
                <p>No. Of Layouts</p>
                <p>
                    <span @ref="section2LayoutRef">@Tracks.ElementAt(selectedIndex).NumberOfLayouts</span>
                </p>
            </div>
            <button type="button" 
                class="btn btn-success"
                @onclick="@(() => AccessTrackDetail(Tracks.ElementAt(selectedIndex).Slug!))">
                View Track
            </button>
        </div>
    </div>
    <div class="gallery-selection">
        <Virtualize Items="@Tracks" Context="track">
            <div class="@(_SelectedSlug.Equals(track.Slug) ? 
                        "gallery-item-container-selected" : "gallery-item-container")" 
                style="background-image: url(@track.CoverUrl);">
                <div class="@(_SelectedSlug.Equals(track.Slug) ? 
                            "gallery-item-content-selected" : "gallery-item-content")">
                    <img
                        src="@track.LogoUrl"
                        alt="@track.Name"
                    />
                </div>
            </div>
        </Virtualize>
        @if (!IsMaximum)
        {
            <div class="more-notice">
                <button type="button" 
                    class="@loadMoreBtnClass"
                    disabled="@IsLoadMoreDisabled"
                    @onclick="@(() => LoadMoreTracks())">
                    @loadMoreBtnText
                </button>
                @if (IsLoadMoreError)
                {
                    <p style="margin-left: 10px;">
                        @ErrorMessage.LoadMoreTracksFailed
                    </p>
                }
            </div>
        }
        else
        {
            <div class="more-notice">
                <p>More race tracks will be added<br>in the future</p>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public List<RaceTrack> Tracks { get; set; } = new();
    private int selectedIndex = 0;
    private string _SelectedSlug = "";
    private RaceTrack _SelectedTrack = new();

    [Parameter]
    public bool IsMaximum { get; set; } = false;
    [Parameter]
    public bool IsLoadMoreError { get; set; } = false;
    [Parameter]
    public bool IsLoadMoreDisabled { get; set; } = false;
    [Parameter]
    public EventCallback OnLoadMoreClicked { get; set; }
    [Parameter]
    public EventCallback<string> OnViewClickHandler { get; set; }

    private string loadMoreBtnClass = "";
    private string loadMoreBtnText = "";
    ElementReference highlightCoverRef, section1CountryRef, section1LogoRef;
    ElementReference section2NameRef, section2CategoryRef, section2LayoutRef;

    protected override void OnParametersSet()
    {
        loadMoreBtnClass = !IsLoadMoreError ? "btn btn-primary btn-more" : "btn btn-warning btn-more";
        loadMoreBtnText = !IsLoadMoreError ? "Load More" : "Try Again";
    }

    private async Task SetSelection(int index)
    {
        if (selectedIndex != index)
        {
            selectedIndex = index;

            await ResetHighlightAnimationWithJS();
        }
    }

    private async Task AccessTrackDetail(string slug)
    {
        await OnViewClickHandler.InvokeAsync(slug);
    }

    private async Task LoadMoreTracks()
    {
        await OnLoadMoreClicked.InvokeAsync();
    }

    private async Task ResetHighlightAnimationWithJS()
    {
        await JS.InvokeVoidAsync("resetAnimationByReinsertClassName", highlightCoverRef, "gallery-highlight");
        await JS.InvokeVoidAsync("resetAnimationByStyle", section1CountryRef);
        await JS.InvokeVoidAsync("resetAnimationByStyle", section1LogoRef);
        await JS.InvokeVoidAsync("resetAnimationByStyle", section2NameRef);
        await JS.InvokeVoidAsync("resetAnimationByStyle", section2CategoryRef);
        await JS.InvokeVoidAsync("resetAnimationByStyle", section2LayoutRef);
    }
}