@page "/browse"
@using GTRouteApp.Services
@using GTRouteApp.Models
@using GTRouteApp.Helpers
@namespace GTRouteApp.BrowseComponents
@inject NavigationManager NavigationManager
@inject RaceTrackService RaceTrackService

<PageTitle>Browse | GTRoad</PageTitle>

@if (tracks == null || tracks.Count == 0)
{   
    <NoDataView Message="@errorMessage" ShowError="@showError" OnTryAgainClicked="OnTryAgainHandler" />
}
else
{
    <BrowseSubheader Info="@_ModeInfo" 
        OnCategoryChanged="OnCategoryChangedHandler" 
        OnSortChanged="OnSortChangedHandler"
        ChosenBrowseMode="ChangeBrowseMode"
        SelectedSort="@_SelectedSort"
        SelectedMode="@_SelectedMode"
        selectedCategory="@_SelectedCategory" />

    @if (_SelectedMode == BrowseMode.Gallery)
    {
        <BrowseGallery Tracks="@tracks" 
            IsMaximum="@isMaximum" 
            IsLoadMoreError="@isLoadMoreError"
            IsLoadMoreDisabled="@isLoadMoreDisabled" 
            OnLoadMoreClicked="LoadMoreTracks"
            OnViewClickHandler="AccessTrackDetail" />
    }
    else if (_SelectedMode == BrowseMode.List)
    {
        <BrowseList Tracks="@tracks"
            IsMaximum="@isMaximum"
            IsLoadMoreError="@isLoadMoreError"
            IsLoadMoreDisabled="@isLoadMoreDisabled"
            OnLoadMoreClicked="@LoadMoreTracks"
            OnViewClickHandler="AccessTrackDetail" />
    }
    else if (_SelectedMode == BrowseMode.Grid)
    {
        <BrowseGrid Tracks="@tracks" 
            IsMaximum="@isMaximum"
            FirstIndexInCurrentPage="@firstIndexInCurrentPage" 
            IsLoadMoreError="@isLoadMoreError"
            IsLoadMoreDisabled="@isLoadMoreDisabled"
            OnLoadMoreClicked="LoadMoreTracks"
            OnViewClickHandler="AccessTrackDetail" />
    }
}

@code {
    private List<RaceTrack> tracks = new();
    private int currentPage = 1;

    private const string galleryInfo = "Click or tap a track on the bottom to highlight";
    private const string listInfo = "Click or tap a track on the list to highlight";
    private const string gridInfo = "Click or tap a track to view";
    private const int limitPerPage = 8;

    [Parameter]
    [SupplyParameterFromQuery(Name = "category")]
    public string InitialCategory { get; set; } = "";
    private string _SelectedCategory { get; set; } = BrowseCategory.Categories[0];

    [Parameter]
    [SupplyParameterFromQuery(Name = "mode")]
    public string SelectedModeQuery { get; set; } = ""; // use BrowseModeQuery
    private BrowseMode _SelectedMode = BrowseMode.Gallery;
    private string _ModeInfo = galleryInfo;

    [Parameter]
    [SupplyParameterFromQuery(Name = "sort")]
    public string SelectedSortQuery { get; set; } = ""; // use BrowseSortQuery
    private BrowseSort _SelectedSort = BrowseSort.Alphabetical;

    private bool isMaximum = false;
    private int firstIndexInCurrentPage = 0;
    private bool isLoadMoreError = false;
    private bool isLoadMoreDisabled = false;
    private string errorMessage = "";
    private bool showError = false;

    protected override async Task OnInitializedAsync()
    {
        PreselectCategory();
        PreselectSortOption();
        
        await LoadData();
    }

    protected override void OnParametersSet()
    {
        PreselectBrowseMode();
    }

    private async Task LoadData()
    {
        await LoadTracks();
        CheckError();
    }

    private async Task LoadTracks()
    {
        var data = await RaceTrackService.GetTracks(currentPage);

        tracks.AddRange(data);
        isMaximum = RaceTrackService.IsRaceTracksReachMaximum();
    }

    private async Task LoadMoreTracks()
    {
        isLoadMoreDisabled = true;

        if (!isMaximum)
        {
            int nextPage = currentPage + 1;
            
            var data = await RaceTrackService.GetTracks(nextPage);

            if (data.Count() > 0) // fetch success, if data > 0
            {
                currentPage = nextPage;
                
                tracks.AddRange(data);
                isMaximum = RaceTrackService.IsRaceTracksReachMaximum();
                firstIndexInCurrentPage = limitPerPage * (currentPage - 1);
                isLoadMoreError = false;
            }
            else
            {
                isLoadMoreError = true;
            }

            isLoadMoreDisabled = false;
        }
    }

    private void ClearData()
    {
        tracks.Clear();
        currentPage = 1;
        isMaximum = false;
        RaceTrackService.ResetRaceTracksList();
    }

    private async Task OnCategoryChangedHandler(string category)
    {
        ClearData();

        ChangeCategory(category);
        await LoadData();
    }

    private async Task OnSortChangedHandler(BrowseSort sort)
    {
        ClearData();

        ChangeSortOption(sort);
        await LoadData();
    }

    private void PreselectCategory()
    {
        _SelectedCategory = string.IsNullOrWhiteSpace(InitialCategory) ? 
            BrowseCategory.Categories[0] : 
            InitialCategory;

        RaceTrackService.SetRaceTracksCategory(_SelectedCategory);
    }

    private void CheckError()
    {
        errorMessage = RaceTrackService.GetRecentErrorMessage();
        showError = string.IsNullOrWhiteSpace(errorMessage) ? false : true;
    }

    private void ChangeCategory(string category)
    {
        _SelectedCategory = category;
        RaceTrackService.SetRaceTracksCategory(_SelectedCategory);

        var updatedUrl = NavigationManager.GetUriWithQueryParameter("category", _SelectedCategory);
        NavigationManager.NavigateTo(updatedUrl);
    }

    private void PreselectBrowseMode()
    {
        if (!string.IsNullOrWhiteSpace(SelectedModeQuery))
        {
            switch (SelectedModeQuery)
            {
                case BrowseModeQuery.GalleryMode:
                    ChangeBrowseMode(BrowseMode.Gallery);
                    break;
                case BrowseModeQuery.ListMode:
                    ChangeBrowseMode(BrowseMode.List);
                    break;
                case BrowseModeQuery.GridMode:
                    ChangeBrowseMode(BrowseMode.Grid);
                    break;
            }
        }
    }

    private void ChangeBrowseMode(BrowseMode mode)
    {
        _SelectedMode = mode;

        switch (_SelectedMode)
        {
            case BrowseMode.Gallery:
                SelectedModeQuery = BrowseModeQuery.GalleryMode;
                _ModeInfo = galleryInfo;
                break;
            case BrowseMode.List:
                SelectedModeQuery = BrowseModeQuery.ListMode;
                _ModeInfo = listInfo;
                break;
            case BrowseMode.Grid:
                SelectedModeQuery = BrowseModeQuery.GridMode;
                _ModeInfo = gridInfo;
                break;
        }
        
        var updatedUrl = NavigationManager.GetUriWithQueryParameter(
            "mode", SelectedModeQuery);
        NavigationManager.NavigateTo(updatedUrl);
    }

    private void PreselectSortOption()
    {
        if (!string.IsNullOrWhiteSpace(SelectedSortQuery))
        {
            switch (SelectedSortQuery)
            {
                case BrowseSortQuery.Alphabetical:
                    ChangeSortOption(BrowseSort.Alphabetical);
                    break;
                case BrowseSortQuery.AlphabeticalReverse:
                    ChangeSortOption(BrowseSort.AlphabeticalReverse);
                    break;
                case BrowseSortQuery.Standard:
                    ChangeSortOption(BrowseSort.Standard);
                    break;
                case BrowseSortQuery.StandardReverse:
                    ChangeSortOption(BrowseSort.StandardReverse);
                    break;
            }
        }
    }

    private void ChangeSortOption(BrowseSort sort)
    {
        this._SelectedSort = sort;
        RaceTrackService.SetSortOption(_SelectedSort);

        switch (this._SelectedSort)
        {
            case BrowseSort.Alphabetical:
                SelectedSortQuery = BrowseSortQuery.Alphabetical;
                break;
            case BrowseSort.AlphabeticalReverse:
                SelectedSortQuery = BrowseSortQuery.AlphabeticalReverse;
                break;
            case BrowseSort.Standard:
                SelectedSortQuery = BrowseSortQuery.Standard;
                break;
            case BrowseSort.StandardReverse:
                SelectedSortQuery = BrowseSortQuery.StandardReverse;
                break;
        }

        var updatedUrl = NavigationManager.GetUriWithQueryParameter(
            "sort", SelectedSortQuery);
        NavigationManager.NavigateTo(updatedUrl);
    }

    private void AccessTrackDetail(string slug)
    {
        if (string.IsNullOrEmpty(SelectedModeQuery))
            SelectedModeQuery = BrowseModeQuery.GalleryMode; // default to gallery origin, if empty

        NavigationManager.NavigateTo($"/browse/detail/{slug}?"
            +$"category={_SelectedCategory}&origin={SelectedModeQuery}");
    }

    private async Task OnTryAgainHandler()
    {
        showError = false;

        await LoadData();
    }
}