@page "/browse"
@using GTRouteApp.Data
@using GTRouteApp.Helpers
@inject NavigationManager NavigationManager
@inject RaceTrackService RaceTrackService

<PageTitle>Browse | GTRoad</PageTitle>

@if (tracks == null || tracks.Count == 0)
{   
    <NoDataView Message="@errorMessage" ShowError="@showError" OnTryAgainClicked="OnTryAgainHandler" />
}
else
{
    <BrowseSubheader Info="@info" ChosenBrowseMode="@ChangeBrowseMode" preselect_mode="@preselect_mode" />

    @if (_mode == BrowseMode.Gallery)
    {
        <BrowseGallery Tracks="@tracks" 
            IsMaximum="@isMaximum" 
            IsLoadMoreError="@isLoadMoreError"
            IsLoadMoreDisabled="@isLoadMoreDisabled" 
            OnLoadMoreClicked="LoadMoreTracks" />
    }
    else if (_mode == BrowseMode.Grid)
    {
        <BrowseGrid Tracks="@tracks" 
            IsMaximum="@isMaximum"
            FirstIndexInCurrentPage="@firstIndexInCurrentPage" 
            IsLoadMoreError="@isLoadMoreError"
            IsLoadMoreDisabled="@isLoadMoreDisabled"
            OnLoadMoreClicked="LoadMoreTracks" />
    }
}

@code {
    private List<RaceTrack> tracks = new();
    private int currentPage = 1;

    private const string galleryInfo = "Click or tap a track on the bottom to highlight";
    private const string gridInfo = "Click or tap a track to view";
    private const int limitPerPage = 8;

    [Parameter]
    [SupplyParameterFromQuery(Name = "preselect_mode")]
    public string preselect_mode { get; set; } = ""; // gallery or grid
    private BrowseMode _mode = BrowseMode.Gallery;
    private string info = galleryInfo;

    private bool isMaximum = false;
    private int firstIndexInCurrentPage = 0;
    private bool isLoadMoreError = false;
    private bool isLoadMoreDisabled = false;
    private string errorMessage = "";
    private bool showError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override void OnParametersSet()
    {
        PreselectBrowseMode();
    }

    private async Task LoadData()
    {
        await LoadTracks();
        CheckError();
    }

    private async Task LoadTracks()
    {
        var data = await RaceTrackService.GetTracksByPage(currentPage);

        tracks.AddRange(data);
        isMaximum = RaceTrackService.IsRaceTracksReachMaximum();
    }

    private async Task LoadMoreTracks()
    {
        isLoadMoreDisabled = true;

        if (!isMaximum)
        {
            int nextPage = currentPage + 1;
            
            var data = await RaceTrackService.GetTracksByPage(nextPage);
            if (data.Count() > 0) // fetch success, if data > 0
            {
                currentPage = nextPage;
                
                tracks.AddRange(data);
                isMaximum = RaceTrackService.IsRaceTracksReachMaximum();
                firstIndexInCurrentPage = limitPerPage * (currentPage - 1);
                isLoadMoreError = false;
            }
            else
            {
                isLoadMoreError = true;
            }

            isLoadMoreDisabled = false;
        }
    }

    private void CheckError()
    {
        errorMessage = RaceTrackService.GetRecentErrorMessage();
        showError = string.IsNullOrWhiteSpace(errorMessage) ? false : true;
    }

    private void PreselectBrowseMode()
    {
        if (!string.IsNullOrWhiteSpace(preselect_mode))
        {
            if (preselect_mode.Equals("gallery"))
            {
                ChangeBrowseMode(BrowseMode.Gallery);
            }
            else if (preselect_mode.Equals("grid"))
            {
                ChangeBrowseMode(BrowseMode.Grid);
            }
        }
    }

    private void ChangeBrowseMode(BrowseMode mode)
    {
        this._mode = mode;

        if (this._mode == BrowseMode.Gallery)
        {
            info = galleryInfo;

            NavigationManager.NavigateTo("/browse?preselect_mode=gallery");
        }
        else if (this._mode == BrowseMode.Grid)
        {
            info = gridInfo;

            NavigationManager.NavigateTo("/browse?preselect_mode=grid");
        }
    }

    private async Task OnTryAgainHandler()
    {
        showError = false;

        await LoadData();
    }
}