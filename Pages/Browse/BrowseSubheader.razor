@using GTRouteApp.Helpers
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable

<div class="subheader-container">
    <div class="subheader-info">
        <span class="bi bi-info-square-fill" style="margin-right: 6px;"></span>@Info
    </div>

    <div class="subheader-options">
        <span class="bi bi-gear-fill setting-icon"></span>

        <div class="subheader-category-selection">
            <span class="bi bi-tags-fill"></span>
            <div class="subheader-category-value">
                <p>@selectedCategory</p>
                <button type="button" class="btn btn-category-change" title="Change Category">
                    <span class="bi bi-caret-down-fill"></span><p>Select</p>
                </button>
            </div>
        </div>

        <!-- TO BE DELETED IN THE FUTURE -->
        <div class="subheader-category-selection" style="width: 80px;">
            <span class="bi bi-tags-fill"></span>
            <select class="form-select form-select-sm" value="@selectedCategory" @onchange="@ApplyCategory">
                @foreach (var category in BrowseCategory.Categories)
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
        <!-- TO BE DELETED IN THE FUTURE -->

        <div class="subheader-view-options">
            <button type="button" class="btn btn-selection" 
                @onclick="() => SwitchMode(BrowseMode.Gallery)"
                data-bs-toggle="tooltip"
                data-bs-placement="left"
                title="Switch to Gallery View"
                @ref="galleryRef"
                disabled=@disableGallery>
                <span class="bi bi-image-fill"></span>
            </button>
            <button type="button" class="btn btn-selection" 
                @onclick="() => SwitchMode(BrowseMode.Grid)"
                data-bs-toggle="tooltip"
                data-bs-placement="left"
                title="Switch to Grid View"
                @ref="gridRef"
                disabled=@disableGrid>
                <span class="bi bi-grid-3x3-gap-fill"></span>
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Info { get; set; } = "";

    [Parameter]
    public EventCallback<string> OnCategoryChanged { get; set; }

    [Parameter]
    public EventCallback<BrowseMode> ChosenBrowseMode { get; set; }

    [Parameter]
    public string preselect_mode { get; set; } = ""; // gallery or grid

    [Parameter]
    public string selectedCategory { get; set; } = "";

    private bool disableGallery = true;
    private bool disableGrid = false;

    private const string subheaderJSPath = "./Pages/Browse/BrowseSubheader.razor.js";
    private Lazy<IJSObjectReference> subheaderJS = new();
    ElementReference galleryRef;
    ElementReference gridRef;

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrWhiteSpace(preselect_mode))
        {
            if (preselect_mode.Equals("gallery"))
            {
                disableGallery = true;
                disableGrid = false;
            }
            else if (preselect_mode.Equals("grid"))
            {
                disableGallery = false;
                disableGrid = true;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            subheaderJS = new(await JS.InvokeAsync<IJSObjectReference>("import", subheaderJSPath));
            await subheaderJS.Value.InvokeVoidAsync("initializeTooltips", galleryRef, gridRef);
        }
    }

    private async Task ApplyCategory(ChangeEventArgs args)
    {
        if (args.Value != null)
        {
            if (!string.IsNullOrWhiteSpace(args.Value.ToString()))
            {
                selectedCategory = args.Value.ToString() ?? "";
                await OnCategoryChanged.InvokeAsync(selectedCategory);
            }
        }
    }

    private async Task SwitchMode(BrowseMode mode)
    {
        disableGallery = disableGallery ? false : true;
        disableGrid = disableGrid ? false : true;
        await HideTooltips();

        await ChosenBrowseMode.InvokeAsync(mode);
    }

    private async Task HideTooltips()
    {
        await subheaderJS.Value.InvokeVoidAsync("hideTooltips");
    }

    public async ValueTask DisposeAsync()
    {
        if (subheaderJS.IsValueCreated)
            await subheaderJS.Value.DisposeAsync();
    }
}