@page "/search"
@using GTRouteApp.Helpers
@using GTRouteApp.Models
@using GTRouteApp.Services
@namespace GTRouteApp.Components.Search
@inject NavigationManager NavigationManager
@inject RaceTrackService RaceTrackService

<PageTitle>Search | GTRoad</PageTitle>

<div class="search-container">
    <div class="inner-container">
        @if (_allTracks.Count() == 0)
        {
            <SearchPreparation ShowError="@_showError" OnTryAgainClicked="RetryPreparation" />
        }
        else
        {
            <SearchInput OnFindExecuted="Find" IsValid="@_isInputValid" />
            @if (_shouldShowResult)
            {
                <div class="search-result-area">
                    <Virtualize Items="@_trackSearchResults" Context="track">
                        <SearchItem Track="track" OnTrackItemClicked="AccessTrackDetail" />
                    </Virtualize>
                </div>
            }
            else
            {
                <SearchNotice Status="@_status" />
            }
        }
    </div>
</div>

@code {
    private List<RaceTrack> _allTracks = new();
    private List<RaceTrack> _trackSearchResults = new();
    private bool _shouldShowResult = false;
    private bool _isInputValid = true;
    private SearchStatus _status = SearchStatus.Initial;
    private bool _showError = false;

    protected override async Task OnInitializedAsync()
    {
        await PrepareSearchData();
    }

    private async Task PrepareSearchData()
    {
        await PreloadTracks();
        CheckError();
    }

    private async Task PreloadTracks()
    {
        var data = await RaceTrackService.GetAllTracks();
        _allTracks.AddRange(data);
    }

    public void Find(string keywords)
    {
        if (ValidateKeywords(keywords))
        {
            var keywordLowerCase = keywords.ToLower();
            _isInputValid = true;
            _trackSearchResults.Clear();

            var results = _allTracks.Where(t => t.Name!.ToLower().Contains(keywordLowerCase)).ToList();
            if (results.Count() > 0)
            {
                _shouldShowResult = true;
                _trackSearchResults.AddRange(results);
            }
            else
            {
                _shouldShowResult = false;
                _status = SearchStatus.NotFound;
            }
        }
        else
        {
            _isInputValid = false;
        }
    }

    private bool ValidateKeywords(string keywords)
    {
        if (string.IsNullOrEmpty(keywords) || keywords.Length < 3)
            return false;

        return true;
    }

    private void AccessTrackDetail(string slug)
    {
        NavigationManager.NavigateTo($"/browse/detail/{slug}");
    }

    private void CheckError()
    {
        _showError = string.IsNullOrWhiteSpace(RaceTrackService.GetRecentErrorMessage()) ? false : true;
    }

    private async Task RetryPreparation()
    {
        _showError = false;

        await PrepareSearchData();
    }
}